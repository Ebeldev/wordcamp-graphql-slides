<!DOCTYPE html><html xmlns:cc="http://creativecommons.org/ns#"><head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# medium-com: http://ogp.me/ns/fb/medium-com#"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=contain"><title>GraphQL vs. REST – Apollo GraphQL</title><link rel="canonical" href="https://blog.apollographql.com/graphql-vs-rest-5d425123e34b"><meta name="title" content="GraphQL vs. REST – Apollo GraphQL"><meta name="referrer" content="unsafe-url"><meta name="description" content="Often, GraphQL is presented as a revolutionary new way to think about APIs. Instead of working with rigid server-defined endpoints, you can send queries to get exactly the data you’re looking for in…"><meta name="theme-color" content="#000000"><meta property="og:title" content="GraphQL vs. REST – Apollo GraphQL"><meta property="og:url" content="https://blog.apollographql.com/graphql-vs-rest-5d425123e34b"><meta property="og:image" content="https://cdn-images-1.medium.com/max/1200/1*qpyJSVVPkd5c6ItMmivnYg.png"><meta property="fb:app_id" content="542599432471018"><meta property="og:description" content="Two ways to send data over HTTP: What’s the difference?"><meta name="twitter:description" content="Two ways to send data over HTTP: What’s the difference?"><meta name="twitter:image:src" content="https://cdn-images-1.medium.com/max/1200/1*qpyJSVVPkd5c6ItMmivnYg.png"><link rel="publisher" href="https://plus.google.com/103654360130207659246"><link rel="author" href="https://blog.apollographql.com/@stubailo"><meta property="author" content="Sashko Stubailo"><meta property="og:type" content="article"><meta name="twitter:card" content="summary_large_image"><meta property="article:publisher" content="https://www.facebook.com/apollographql"><meta property="article:author" content="10153739958494254"><meta name="robots" content="index, follow"><meta property="article:published_time" content="2017-06-27T16:59:49.183Z"><meta name="twitter:creator" content="@stubailo"><meta name="twitter:site" content="@apollographql"><meta property="og:site_name" content="Apollo GraphQL"><meta name="twitter:label1" value="Reading time"><meta name="twitter:data1" value="10 min read"><meta name="twitter:app:name:iphone" content="Medium"><meta name="twitter:app:id:iphone" content="828256236"><meta name="twitter:app:url:iphone" content="medium://p/5d425123e34b"><meta property="al:ios:app_name" content="Medium"><meta property="al:ios:app_store_id" content="828256236"><meta property="al:android:package" content="com.medium.reader"><meta property="al:android:app_name" content="Medium"><meta property="al:ios:url" content="medium://p/5d425123e34b"><meta property="al:android:url" content="medium://p/5d425123e34b"><meta property="al:web:url" content="https://blog.apollographql.com/graphql-vs-rest-5d425123e34b"><link rel="search" type="application/opensearchdescription+xml" title="Medium" href="/osd.xml" /><link rel="alternate" href="android-app://com.medium.reader/https/medium.com/p/5d425123e34b" /><script type="application/ld+json">{"@context":"http://schema.org","@type":"NewsArticle","image":{"@type":"ImageObject","width":800,"height":400,"url":"https://cdn-images-1.medium.com/max/1600/1*qpyJSVVPkd5c6ItMmivnYg.png"},"url":"https://blog.apollographql.com/graphql-vs-rest-5d425123e34b","dateCreated":"2017-06-27T16:59:49.183Z","datePublished":"2017-06-27T16:59:49.183Z","dateModified":"2018-06-21T05:59:54.263Z","headline":"GraphQL vs. REST","name":"GraphQL vs. REST","thumbnailUrl":"https://cdn-images-1.medium.com/max/1600/1*qpyJSVVPkd5c6ItMmivnYg.png","keywords":["Tag:GraphQL","Tag:Rest","Tag:API","Tag:React","Tag:Data","Publication:apollo-stack","LockedPostSource:0","Elevated:false","LayerCake:0"],"author":{"@type":"Person","name":"Sashko Stubailo","url":"https://blog.apollographql.com/@stubailo"},"creator":["Sashko Stubailo"],"publisher":{"@type":"Organization","name":"Apollo GraphQL","url":"https://blog.apollographql.com","logo":{"@type":"ImageObject","width":203,"height":60,"url":"https://cdn-images-1.medium.com/max/406/1*JVFm_pqNLKi4sobJzicbww.png"}},"mainEntityOfPage":"https://blog.apollographql.com/graphql-vs-rest-5d425123e34b"}</script><link rel="stylesheet" type="text/css" class="js-glyph-" id="glyph-8" href="https://glyph.medium.com/css/e/sr/latin/e/ssr/latin/e/ssb/latin/m2.css" /><link rel="stylesheet" href="https://cdn-static-1.medium.com/_/fp/css/main-branding-base.Wd2nhDzXq-LXOBFJaK5iAA.css"><script>if (window.top !== window.self) window.top.location = window.self.location.href;var OB_startTime = new Date().getTime(); var OB_loadErrors = []; function _onerror(e) { OB_loadErrors.push(e) }; if (document.addEventListener) document.addEventListener("error", _onerror, true); else if (document.attachEvent) document.attachEvent("onerror", _onerror); function _asyncScript(u) {var d = document, f = d.getElementsByTagName("script")[0], s = d.createElement("script"); s.type = "text/javascript"; s.async = true; s.src = u; f.parentNode.insertBefore(s, f);}function _asyncStyles(u) {var d = document, f = d.getElementsByTagName("script")[0], s = d.createElement("link"); s.rel = "stylesheet"; s.href = u; f.parentNode.insertBefore(s, f); return s}(new Image()).src = "/_/stat?event=pixel.load&origin=" + encodeURIComponent(location.origin);</script><script>window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date; ga("create", "UA-24232453-2", "auto", {"allowLinker": true, "legacyCookieDomain": window.location.hostname}); ga("send", "pageview");ga("create", "UA-74643563-11", "auto", 'tracker0'); ga("tracker0.send", "pageview");</script><script async src="https://www.google-analytics.com/analytics.js"></script><!--[if lt IE 9]><script charset="UTF-8" src="https://cdn-static-1.medium.com/_/fp/js/shiv.RI2ePTZ5gFmMgLzG5bEVAA.js"></script><![endif]--><link rel="icon" href="https://cdn-static-1.medium.com/_/fp/icons/favicon-rebrand-medium.3Y6xpZ-0FSdWDnPM3hSBIA.ico" class="js-favicon"><link rel="apple-touch-icon" sizes="152x152" href="https://cdn-images-1.medium.com/fit/c/304/304/1*h3E_KHKB9jNKTkXkhrY5gA.png"><link rel="apple-touch-icon" sizes="120x120" href="https://cdn-images-1.medium.com/fit/c/240/240/1*h3E_KHKB9jNKTkXkhrY5gA.png"><link rel="apple-touch-icon" sizes="76x76" href="https://cdn-images-1.medium.com/fit/c/152/152/1*h3E_KHKB9jNKTkXkhrY5gA.png"><link rel="apple-touch-icon" sizes="60x60" href="https://cdn-images-1.medium.com/fit/c/120/120/1*h3E_KHKB9jNKTkXkhrY5gA.png"><link rel="mask-icon" href="https://cdn-static-1.medium.com/_/fp/icons/monogram-mask.KPLCSFEZviQN0jQ7veN2RQ.svg" color="#171717"></head><body itemscope class=" postShowScreen browser-chrome os-windows is-withMagicUnderlinesv-glyph v-glyph--m2 is-noJs"><script>document.body.className = document.body.className.replace(/(^|\s)is-noJs(\s|$)/, "$1is-js$2")</script><div class="site-main" id="container"><div class="butterBar butterBar--error"></div><div class="surface"><div id="prerendered" class="screenContent"><canvas class="canvas-renderer"></canvas><div class="container u-maxWidth740 u-xs-margin0 notesPositionContainer js-notesPositionContainer"></div><div class="metabar u-clearfix js-metabar u-textColorTransparentWhiteDarker u-fixed u-backgroundTransparentWhiteDarkest u-xs-sizeFullViewportWidth u-tintBgColor u-tintSpectrum"><div class="js-metabarMiddle metabar-inner u-marginAuto u-maxWidth1000 u-flexCenter u-justifyContentSpaceBetween u-height65 u-xs-height56 u-paddingLeft20 u-paddingRight20"><div class="metabar-block u-flex1  u-flexCenter"><div class="js-metabarLogoLeft"><a href="https://medium.com/" data-log-event="home" class="siteNav-logo u-flexCenter u-paddingTop0"><span class="svgIcon svgIcon--logoMonogram svgIcon--45px is-flushLeft u-textColorDarker"><svg class="svgIcon-use" width="45" height="45" viewBox="0 0 45 45" ><path d="M5 40V5h35v35H5zm8.56-12.627c0 .555-.027.687-.318 1.03l-2.457 2.985v.396h6.974v-.396l-2.456-2.985c-.291-.343-.344-.502-.344-1.03V18.42l6.127 13.364h.714l5.256-13.364v10.644c0 .29 0 .342-.185.528l-1.848 1.796v.396h9.19v-.396l-1.822-1.796c-.184-.186-.21-.238-.21-.528V15.937c0-.291.026-.344.21-.528l1.823-1.797v-.396h-6.471l-4.622 11.542-5.203-11.542h-6.79v.396l2.14 2.64c.239.292.291.37.291.768v10.353z"/></svg></span><span class="u-textScreenReader">Homepage</span></a></div><div class="u-flexCenter u-height65 u-xs-height56"><span class="u-inlineBlock u-height28 u-xs-height24 u-verticalAlignTop u-marginRight20 u-marginLeft15 u-borderRightTransparentWhiteLighter"></span></div><div class="u-flexCenter u-height65 u-xs-height56 u-marginRight18"><a class="js-collectionLogoOrName u-uiTextBold u-fontSize18 u-lineHeightTightest u-xs-fontSize22" href="https://blog.apollographql.com?source=logo-lo_UbGWuDXe1fGU---3804c1b351c9"><img height="36" width="122" class="u-paddingTop5" src="https://cdn-images-1.medium.com/letterbox/244/72/50/50/1*JVFm_pqNLKi4sobJzicbww.png?source=logoAvatar-lo_UbGWuDXe1fGU---3804c1b351c9" alt="Apollo GraphQL" /></a></div><div class="u-flexCenter u-height65 u-xs-height56 u-xs-hide"><div class="buttonSet"><button class="button button--primary button--smallest u-noUserSelect button--withChrome u-accentColor--buttonNormal js-relationshipButton is-smallPill"  data-action="sign-up-prompt" data-sign-in-action="toggle-follow-collection" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/collection/apollo-stack" data-action-source="----3804c1b351c9----------------------follow_header" data-collection-id="3804c1b351c9"><span class="button-label  js-buttonLabel">Follow</span></button><a class="button button--light button--chromeless is-touchIconBlackPulse u-baseColor--buttonLight button--withIcon button--withSvgIcon"   href="https://twitter.com/apollographql" title="Visit “Apollo GraphQL” on Twitter" aria-label="Visit “Apollo GraphQL” on Twitter" rel="me" target="_blank"><span class="button-defaultState"><span class="svgIcon svgIcon--twitterFilled svgIcon--25px"><svg class="svgIcon-use" width="25" height="25" viewBox="0 0 25 25" ><path d="M21.725 5.338c-.744.47-1.605.804-2.513 1.006a3.978 3.978 0 0 0-2.942-1.293c-2.22 0-4.02 1.81-4.02 4.02 0 .32.034.63.07.94-3.31-.18-6.27-1.78-8.255-4.23a4.544 4.544 0 0 0-.574 2.01c.04 1.43.74 2.66 1.8 3.38-.63-.01-1.25-.19-1.79-.5v.08c0 1.93 1.38 3.56 3.23 3.95-.34.07-.7.12-1.07.14-.25-.02-.5-.04-.72-.07.49 1.58 1.97 2.74 3.74 2.8a8.49 8.49 0 0 1-5.02 1.72c-.3-.03-.62-.04-.93-.07A11.447 11.447 0 0 0 8.88 21c7.386 0 11.43-6.13 11.414-11.414.015-.21.01-.38 0-.578a7.604 7.604 0 0 0 2.01-2.08 7.27 7.27 0 0 1-2.297.645 3.856 3.856 0 0 0 1.72-2.23"/></svg></span></span></a><a class="button button--light button--chromeless is-touchIconBlackPulse u-baseColor--buttonLight button--withIcon button--withSvgIcon u-paddingLeft0"   href="//facebook.com/apollographql" title="Visit “Apollo GraphQL” on Facebook" aria-label="Visit “Apollo GraphQL” on Facebook" rel="me" target="_blank"><span class="button-defaultState"><span class="svgIcon svgIcon--facebookFilled svgIcon--25px"><svg class="svgIcon-use" width="25" height="25" viewBox="0 0 25 25" ><path d="M21 12.646C21 7.65 16.97 3.6 12 3.6s-9 4.05-9 9.046a9.026 9.026 0 0 0 7.59 8.924v-6.376H8.395V12.64h2.193v-1.88c0-2.186 1.328-3.375 3.267-3.375.93 0 1.728.07 1.96.1V9.77H14.47c-1.055 0-1.26.503-1.26 1.242v1.63h2.517l-.33 2.554H13.21V21.6c4.398-.597 7.79-4.373 7.79-8.954"/></svg></span></span></a></div></div></div><div class="metabar-block u-flex0 u-flexCenter"><div class="u-flexCenter u-height65 u-xs-height56"><div class="buttonSet buttonSet--wide u-lineHeightInherit"><a class="button button--primary button--light button--chromeless u-accentColor--buttonNormal is-inSiteNavBar u-xs-hide js-signInButton"   href="https://medium.com/m/signin?redirect=https%3A%2F%2Fblog.apollographql.com%2Fgraphql-vs-rest-5d425123e34b&amp;source=--------------------------nav_reg&amp;operation=login" data-action="sign-in-prompt" data-redirect="https://blog.apollographql.com/graphql-vs-rest-5d425123e34b" data-action-source="--------------------------nav_reg">Sign in</a><a class="button button--primary button--light button--withChrome u-accentColor--buttonNormal is-inSiteNavBar js-signUpButton"   href="https://medium.com/m/signin?redirect=https%3A%2F%2Fblog.apollographql.com%2Fgraphql-vs-rest-5d425123e34b&amp;source=--------------------------nav_reg&amp;operation=register" data-action="sign-up-prompt" data-redirect="https://blog.apollographql.com/graphql-vs-rest-5d425123e34b" data-action-source="--------------------------nav_reg">Get started</a></div></div></div></div><div class="metabar-inner u-marginAuto u-maxWidth1000 js-metabarBottom"><nav role="navigation" class="metabar-block metabar-block--below u-overflowHidden u-height44"><ul class="u-textAlignLeft u-noWrap u-overflowX u-paddingBottom100 u-sm-paddingLeft20 u-sm-paddingRight20 js-collectionNavItems"><li class="metabar-navItem js-collectionNavItem u-uiTextMedium u-fontSize14 u-inlineBlock u-textUppercase u-letterSpacing003 u-textColorNormal u-xs-paddingRight12 u-xs-marginRight0 u-paddingTop5 u-xs-paddingTop10"><a class="link link--darken u-accentColor--textDarken u-baseColor--link js-homeNav"   href="https://blog.apollographql.com">Home</a></li><li class="metabar-navItem js-collectionNavItem  u-uiTextMedium u-fontSize14 u-inlineBlock u-textUppercase u-letterSpacing003 u-textColorNormal u-xs-paddingRight12 u-xs-marginRight0 u-paddingTop5 u-xs-paddingTop10"><a class="link link--darken u-accentColor--textDarken link--noUnderline u-baseColor--link js-navItemLink"   href="https://blog.apollographql.com/client/home">Client</a></li><li class="metabar-navItem js-collectionNavItem  u-uiTextMedium u-fontSize14 u-inlineBlock u-textUppercase u-letterSpacing003 u-textColorNormal u-xs-paddingRight12 u-xs-marginRight0 u-paddingTop5 u-xs-paddingTop10"><a class="link link--darken u-accentColor--textDarken link--noUnderline u-baseColor--link js-navItemLink"   href="https://blog.apollographql.com/engine/home">Engine</a></li><li class="metabar-navItem js-collectionNavItem  u-uiTextMedium u-fontSize14 u-inlineBlock u-textUppercase u-letterSpacing003 u-textColorNormal u-xs-paddingRight12 u-xs-marginRight0 u-paddingTop5 u-xs-paddingTop10"><a class="link link--darken u-accentColor--textDarken link--noUnderline u-baseColor--link js-navItemLink"   href="https://blog.apollographql.com/server/home">Server</a></li><span class="u-borderLeft1 u-paddingLeft12 u-baseColor--borderLight"></span><li class="metabar-navItem js-collectionNavItem  u-paddingLeft0 is-external u-uiTextMedium u-fontSize14 u-inlineBlock u-textUppercase u-letterSpacing003 u-textColorNormal u-xs-paddingRight12 u-xs-marginRight0 u-paddingTop5 u-xs-paddingTop10"><a class="link link--darkenOnHover u-accentColor--textDarken link--noUnderline u-baseColor--link js-navItemLink"   href="https://www.apollographql.com" rel="nofollow noopener" target="_blank">apollographql.com</a></li><li class="metabar-navItem js-collectionNavItem u-uiTextMedium u-fontSize14 u-inlineBlock u-textUppercase u-letterSpacing003 u-textColorNormal u-xs-paddingRight12 u-xs-marginRight0 u-paddingTop5 u-xs-paddingTop10"><a class="button button--chromeless u-baseColor--buttonNormal button--withIcon button--withSvgIcon u-top1"   href="https://blog.apollographql.com/search" title="Search" aria-label="Search"><span class="button-defaultState"><span class="svgIcon svgIcon--search svgIcon--25px"><svg class="svgIcon-use" width="25" height="25"  viewBox="0 0 25 25"><path d="M20.067 18.933l-4.157-4.157a6 6 0 1 0-.884.884l4.157 4.157a.624.624 0 1 0 .884-.884zM6.5 11c0-2.62 2.13-4.75 4.75-4.75S16 8.38 16 11s-2.13 4.75-4.75 4.75S6.5 13.62 6.5 11z"/></svg></span></span></a></li></ul></nav></div></div><div class="metabar metabar--spacer js-metabarSpacer u-tintBgColor  u-height105 u-xs-height95"></div><main role="main"><article class=" u-minHeight100vhOffset65 u-overflowHidden postArticle postArticle--full is-withAccentColors u-marginBottom40"  lang="en"><header class="container u-maxWidth740"><div class="uiScale uiScale-ui--regular uiScale-caption--regular postMetaHeader u-paddingBottom10 row"><div class="col u-size12of12 js-postMetaLockup"><div class="uiScale uiScale-ui--regular uiScale-caption--regular postMetaLockup postMetaLockup--authorWithBio u-flexCenter js-postMetaLockup"><div class="u-flex0"><a class="link u-baseColor--link avatar"   href="https://blog.apollographql.com/@stubailo?source=post_header_lockup" data-action="show-user-card" data-action-source="post_header_lockup" data-action-value="803918030a60" data-action-type="hover" data-user-id="803918030a60" data-collection-slug="apollo-stack" dir="auto"><img  src="https://cdn-images-1.medium.com/fit/c/120/120/1*PY72Bc0gKLEQOBZ0m1P6rw@2x.jpeg" class="avatar-image avatar-image--small" alt="Go to the profile of Sashko Stubailo"></a></div><div class="u-flex1 u-paddingLeft15 u-overflowHidden"><div class="u-lineHeightTightest"><a class="ds-link ds-link--styleSubtle ui-captionStrong u-inlineBlock link link--darken link--darker"   href="https://blog.apollographql.com/@stubailo?source=post_header_lockup" data-action="show-user-card" data-action-source="post_header_lockup" data-action-value="803918030a60" data-action-type="hover" data-user-id="803918030a60" data-collection-slug="apollo-stack" dir="auto">Sashko Stubailo</a><span class="followState js-followState" data-user-id="803918030a60"><button class="button button--smallest u-noUserSelect button--withChrome u-baseColor--buttonNormal button--withHover button--unblock js-unblockButton u-marginLeft10 u-xs-hide"  data-action="sign-up-prompt" data-sign-in-action="toggle-block-user" data-requires-token="true" data-redirect="https://blog.apollographql.com/graphql-vs-rest-5d425123e34b" data-action-source="post_header_lockup"><span class="button-label  button-defaultState">Blocked</span><span class="button-label button-hoverState">Unblock</span></button><button class="button button--primary button--smallest u-noUserSelect button--withChrome u-accentColor--buttonNormal button--follow js-followButton u-marginLeft10 u-xs-hide"  data-action="sign-up-prompt" data-sign-in-action="toggle-subscribe-user" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/user/803918030a60" data-action-source="post_header_lockup-803918030a60-------------------------follow_byline"><span class="button-label  button-defaultState js-buttonLabel">Follow</span><span class="button-label button-activeState">Following</span></button></span></div><div class="ui-caption ui-xs-clamp2 postMetaInline">Open source lead at @apollographql and @meteorjs, https://github.com/stubailo</div><div class="ui-caption postMetaInline js-testPostMetaInlineSupplemental"><time datetime="2017-06-27T16:59:49.183Z">Jun 27, 2017</time><span class="middotDivider u-fontSize12"></span><span class="readingTime" title="10 min read"></span></div></div></div></div></div></header><div class="postArticle-content js-postField js-notesSource js-trackedPost"  data-post-id="5d425123e34b" data-source="post_page" data-collection-id="3804c1b351c9" data-tracking-context="postPage"><section name="e92a" class="section section--body section--first"><div class="section-divider"><hr class="section-divider"></div><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><h1 name="152d" id="152d" class="graf graf--h3 graf--leading graf--title">GraphQL vs. REST</h1><h2 name="0018" id="0018" class="graf graf--h4 graf-after--h3 graf--subtitle">Two ways to send data over HTTP: What’s the difference?</h2><p name="a443" id="a443" class="graf graf--p graf-after--h4">Often, GraphQL is presented as a revolutionary new way to think about APIs. Instead of working with rigid server-defined endpoints, you can send queries to get exactly the data you’re looking for in one request. And it’s true — GraphQL can be transformative when adopted in an organization, enabling frontend and backend teams to collaborate more smoothly than ever before. But in practice, both of these technologies involve sending an HTTP request and receiving some result, and GraphQL has many elements of the REST model built in.</p><p name="e7eb" id="e7eb" class="graf graf--p graf-after--p">So what’s the real deal on a technical level? What are the similarities and differences between these two API paradigms? My claim by the end of the article is going to be that GraphQL and REST are not so different after all, but that GraphQL has some small changes that make a big difference to the developer experience of building and consuming an API.</p><p name="bf53" id="bf53" class="graf graf--p graf-after--p">So let’s jump right in. We’ll identify some properties of an API, and then discuss how GraphQL and REST handle them.</p><h3 name="393a" id="393a" class="graf graf--h3 graf-after--p">Resources</h3><p name="3a44" id="3a44" class="graf graf--p graf-after--h3">The core idea of REST is the resource. Each resource is identified by a URL, and you retrieve that resource by sending a <code class="markup--code markup--p-code">GET</code> request to that URL. You will likely get a JSON response, since that’s what most APIs are using these days. So it looks something like:</p><pre name="3f31" id="3f31" class="graf graf--pre graf-after--p">GET /books/1</pre><pre name="368a" id="368a" class="graf graf--pre graf-after--pre">{<br>  &quot;title&quot;: &quot;Black Hole Blues&quot;,<br>  &quot;author&quot;: { <br>    &quot;firstName&quot;: &quot;Janna&quot;,<br>    &quot;lastName&quot;: &quot;Levin&quot;<br>  }<br>  // ... more fields here<br>}</pre><p name="36af" id="36af" class="graf graf--p graf-after--pre"><em class="markup--em markup--p-em">Note: In the example above, some REST APIs would return “author” as a separate resource.</em></p><p name="30fd" id="30fd" class="graf graf--p graf-after--p">One thing to note in REST is that the type, or shape, of the resource and the way you fetch that resource are coupled. When you talk about the above in REST documentation, you might refer to it as the “book endpoint”.</p><p name="466f" id="466f" class="graf graf--p graf-after--p">GraphQL is quite different in this respect, because in GraphQL these two concepts are completely separate. In your schema, you might have <code class="markup--code markup--p-code">Book</code> and <code class="markup--code markup--p-code">Author</code> types:</p><pre name="8a0d" id="8a0d" class="graf graf--pre graf-after--p">type Book {<br>  id: ID<br>  title: String<br>  published: Date<br>  price: String<br>  author: Author<br>}</pre><pre name="951b" id="951b" class="graf graf--pre graf-after--pre">type Author {<br>  id: ID<br>  firstName: String<br>  lastName: String<br>  books: [Book]<br>}</pre><p name="8ec5" id="8ec5" class="graf graf--p graf-after--pre">Notice that we have described the kinds of data available, but this description doesn’t tell you anything at all about how those objects might be fetched from a client. That’s one core difference between REST and GraphQL — the description of a particular resource is not coupled to the way you retrieve it.</p><p name="8aaf" id="8aaf" class="graf graf--p graf-after--p">To be able to actually access a particular book or author, we need to create a <code class="markup--code markup--p-code">Query</code> type in our schema:</p><pre name="9950" id="9950" class="graf graf--pre graf-after--p">type Query {<br>  book(id: ID!): Book<br>  author(id: ID!): Author<br>}</pre><p name="68df" id="68df" class="graf graf--p graf-after--pre">Now, we can send a request similar to the REST request above, but with GraphQL this time:</p><pre name="d86c" id="d86c" class="graf graf--pre graf-after--p">GET /graphql?query={ book(id: &quot;1&quot;) { title, author { firstName } } }</pre><pre name="83c6" id="83c6" class="graf graf--pre graf-after--pre">{<br>  &quot;title&quot;: &quot;Black Hole Blues&quot;,<br>  &quot;author&quot;: {<br>    &quot;firstName&quot;: &quot;Janna&quot;,<br>  }<br>}</pre><p name="54a8" id="54a8" class="graf graf--p graf-after--pre">Nice, now we’re getting somewhere! We can immediately see a few things about GraphQL that are quite different from REST, even though both can be requested via URL, and both can return the same shape of JSON response.</p><p name="7a3f" id="7a3f" class="graf graf--p graf-after--p">First of all, we can see that the URL with a GraphQL query specifies the resource we’re asking for and also which fields we care about. Also, rather than the server author deciding for us that the related <code class="markup--code markup--p-code">author</code> resource needs to be included, the consumer of the API decides.</p><p name="98f9" id="98f9" class="graf graf--p graf-after--p">But most importantly, the identities of the resources, the concepts of Books and Authors, are not coupled to the way they are fetched. We could potentially retrieve the same Book through many different types of queries, and with different sets of fields.</p><h4 name="9c2d" id="9c2d" class="graf graf--h4 graf-after--p">Conclusion</h4><p name="f1cf" id="f1cf" class="graf graf--p graf-after--h4">We’ve identified some similarities and differences already:</p><ul class="postList"><li name="4aa6" id="4aa6" class="graf graf--li graf-after--p"><strong class="markup--strong markup--li-strong">Similar: </strong>Both have the idea of a resource, and can specify IDs for those resources.</li><li name="bbd7" id="bbd7" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">Similar:</strong> Both can be fetched via an HTTP GET request with a URL.</li><li name="afef" id="afef" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">Similar: </strong>Both can return JSON data in the request.</li><li name="8363" id="8363" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">Different:</strong> In REST, the endpoint you call is the identity of that object. In GraphQL, the identity is separate from how you fetch it.</li><li name="08d6" id="08d6" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">Different:</strong> In REST, the shape and size of the resource is determined by the server. In GraphQL, the server declares what resources are available, and the client asks for what it needs at the time.</li></ul><p name="4cf4" id="4cf4" class="graf graf--p graf-after--li">Alright, this was pretty basic if you’ve already used GraphQL and/or REST. If you haven’t used GraphQL before, you can play around with <a href="https://launchpad.graphql.com/1jzxrj179" data-href="https://launchpad.graphql.com/1jzxrj179" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">an example similar to the above</a> on Launchpad, a tool for building and exploring GraphQL examples in your browser.</p><h3 name="69d1" id="69d1" class="graf graf--h3 graf-after--p">URL Routes vs GraphQL Schema</h3><p name="1685" id="1685" class="graf graf--p graf-after--h3">An API isn’t useful if it isn’t predictable. When you consume an API, you’re usually doing it as part of some program, and that program needs to know what it can call and what it should expect to receive as the result, so that it can operate on that result.</p><p name="4bea" id="4bea" class="graf graf--p graf-after--p">So one of the most important parts of an API is a description of what can be accessed. This is what you’re learning when you read API documentation, and with GraphQL introspection and REST API schema systems like Swagger, this information can be examined programmatically.</p><p name="fc65" id="fc65" class="graf graf--p graf-after--p">In today’s REST APIs, the API is usually described as a list of endpoints:</p><pre name="6925" id="6925" class="graf graf--pre graf-after--p">GET /books/:id<br>GET /authors/:id<br>GET /books/:id/comments<br>POST /books/:id/comments</pre><p name="d785" id="d785" class="graf graf--p graf-after--pre">So you could say that the “shape” of the API is linear — there’s a list of things you can access. When you are retrieving data or saving something, the first question to ask is “which endpoint should I call”?</p><p name="e6ed" id="e6ed" class="graf graf--p graf-after--p">In GraphQL, as we covered above, you don’t use URLs to identify what is available in the API. Instead, you use a GraphQL schema:</p><pre name="0031" id="0031" class="graf graf--pre graf-after--p">type Query {<br>  book(id: ID!): Book<br>  author(id: ID!): Author<br>}</pre><pre name="f2dc" id="f2dc" class="graf graf--pre graf-after--pre">type Mutation {<br>  addComment(input: AddCommentInput): Comment<br>}</pre><pre name="2d9f" id="2d9f" class="graf graf--pre graf-after--pre">type Book { ... }<br>type Author { ... }<br>type Comment { ... }<br>input AddCommentInput { ... }</pre><p name="7aa8" id="7aa8" class="graf graf--p graf-after--pre">There are a few interesting bits here when compared to the REST routes for a similar data set. First, instead of sending a different HTTP verb to the same URL to differentiate a read vs. a write, GraphQL uses a different <em class="markup--em markup--p-em">initial type</em> — Mutation vs. Query. In a GraphQL document, you can select which type of operation you’re sending with a keyword:</p><pre name="4dc3" id="4dc3" class="graf graf--pre graf-after--p">query { ... }<br>mutation { ... }</pre><p name="5a7a" id="5a7a" class="graf graf--p graf-after--pre"><em class="markup--em markup--p-em">For all of the details about the query language, read my earlier post, </em><a href="https://dev-blog.apollodata.com/the-anatomy-of-a-graphql-query-6dffa9e9e747" data-href="https://dev-blog.apollodata.com/the-anatomy-of-a-graphql-query-6dffa9e9e747" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"><em class="markup--em markup--p-em">“The Anatomy of a GraphQL Query”</em></a><em class="markup--em markup--p-em">.</em></p><p name="8ef3" id="8ef3" class="graf graf--p graf-after--p">You can see that the fields on the <code class="markup--code markup--p-code">Query</code> type match up pretty nicely with the REST routes we had above. That’s because this special type is the entry point into our data, so this is the most equivalent concept in GraphQL to an endpoint URL.</p><p name="e663" id="e663" class="graf graf--p graf-after--p">The way you get the initial resource from a GraphQL API is quite similar to REST — you pass a name and some parameters — but the main difference is where you can go from there. In GraphQL, you can send a complex query that fetches additional data according to relationships defined in the schema, but in REST you would have to do that via multiple requests, build the related data into the initial response, or include some special parameters in the URL to modify the response.</p><h4 name="66dc" id="66dc" class="graf graf--h4 graf-after--p">Conclusion</h4><p name="a71e" id="a71e" class="graf graf--p graf-after--h4">In REST, the space of accessible data is described as a linear list of endpoints, and in GraphQL it’s a schema with relationships.</p><ul class="postList"><li name="ec22" id="ec22" class="graf graf--li graf-after--p"><strong class="markup--strong markup--li-strong">Similar:</strong> The list of endpoints in a REST API is similar to the list of fields on the <code class="markup--code markup--li-code">Query</code> and <code class="markup--code markup--li-code">Mutation</code> types in a GraphQL API. They are both the entry points into the data.</li><li name="9026" id="9026" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">Similar:</strong> Both have a way to differentiate if an API request is meant to read data or write it.</li><li name="00bd" id="00bd" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">Different:</strong> In GraphQL, you can traverse from the entry point to related data, following relationships defined in the schema, in a single request. In REST, you have to call multiple endpoints to fetch related resources.</li><li name="eff4" id="eff4" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">Different:</strong> In GraphQL, there’s no difference between the fields on the <code class="markup--code markup--li-code">Query</code> type and the fields on any other type, except that only the query type is accessible at the root of a query. For example, you can have arguments in any field in a query. In REST, there’s no first-class concept of a nested URL.</li><li name="deb5" id="deb5" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">Different:</strong> In REST, you specify a write by changing the HTTP verb from <code class="markup--code markup--li-code">GET</code> to something else like <code class="markup--code markup--li-code">POST</code>. In GraphQL, you change a keyword in the query.</li></ul><p name="3a31" id="3a31" class="graf graf--p graf-after--li">Because of the first point in the list of similarities above, people often start referring to fields on the <code class="markup--code markup--p-code">Query</code> type as GraphQL “endpoints” or “queries”. While that’s a reasonable comparison, it can lead to a misleading perception that the Query type works significantly differently from other types, which is not the case.</p><h3 name="e1d0" id="e1d0" class="graf graf--h3 graf-after--p">Route Handlers vs. Resolvers</h3><p name="c9ef" id="c9ef" class="graf graf--p graf-after--h3">So what happens when you actually call an API? Well, usually it executes some code on the server that received the request. That code might do a computation, load data from a database, call a different API, or really do anything. The whole idea is you don’t need to know from the outside what it’s doing. But both REST and GraphQL have pretty standard ways for implementing the inside of that API, and it’s useful to compare them to get a sense for how these technologies are different.</p><p name="f6f6" id="f6f6" class="graf graf--p graf-after--p">In this comparison I’ll use JavaScript code because that’s what I’m most familiar with, but of course you can implement both REST and GraphQL APIs in almost any programming language. I’ll also skip any boilerplate required for setting up the server, since it’s not important to the concepts.</p><p name="da68" id="da68" class="graf graf--p graf-after--p">Let’s look at a hello world example with express, a popular API library for Node:</p><pre name="7ba5" id="7ba5" class="graf graf--pre graf-after--p"><code class="markup--code markup--pre-code">app.get(&#39;/hello&#39;, function (req, res) {<br>  res.send(&#39;Hello World!&#39;)<br>})</code></pre><p name="0017" id="0017" class="graf graf--p graf-after--pre">Here you see we’ve created a <code class="markup--code markup--p-code">/hello</code> endpoint that returns the string <code class="markup--code markup--p-code">&#39;Hello World!&#39;</code>. From this example we can see the lifecycle of an HTTP request in a REST API server:</p><ol class="postList"><li name="b415" id="b415" class="graf graf--li graf-after--p">The server receives the request and retrieves the HTTP verb (<code class="markup--code markup--li-code">GET</code> in this case) and URL path</li><li name="c041" id="c041" class="graf graf--li graf-after--li">The API library matches up the verb and path to a function registered by the server code</li><li name="f7bd" id="f7bd" class="graf graf--li graf-after--li">The function executes once, and returns a result</li><li name="8433" id="8433" class="graf graf--li graf-after--li">The API library serializes the result, adds an appropriate response code and headers, and sends it back to the client</li></ol><p name="f668" id="f668" class="graf graf--p graf-after--li">GraphQL works in a very similar way, and for the same <a href="https://launchpad.graphql.com/new" data-href="https://launchpad.graphql.com/new" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">hello world example</a> it’s virtually identical:</p><pre name="f010" id="f010" class="graf graf--pre graf-after--p">const resolvers = {<br>  Query: {<br>    hello: () =&gt; {<br>      return &#39;Hello world!&#39;;<br>    },<br>  },<br>};</pre><p name="179e" id="179e" class="graf graf--p graf-after--pre">As you can see, instead of providing a function for a specific URL, we’re providing a function that matches a particular field on a type, in this case the <code class="markup--code markup--p-code">hello</code> field on the <code class="markup--code markup--p-code">Query</code> type. In GraphQL, this function that implements a field is called a <strong class="markup--strong markup--p-strong">resolver</strong>.</p><p name="4510" id="4510" class="graf graf--p graf-after--p">To make a request we need a query:</p><pre name="24ca" id="24ca" class="graf graf--pre graf-after--p">query {<br>  hello<br>}</pre><p name="1c19" id="1c19" class="graf graf--p graf-after--pre">So here’s what happens when our server receives a GraphQL request:</p><ol class="postList"><li name="bfc0" id="bfc0" class="graf graf--li graf-after--p">The server receives the request, and retrieves the GraphQL query</li><li name="0aa9" id="0aa9" class="graf graf--li graf-after--li">The query is traversed, and for each field the appropriate resolver is called. In this case, there’s just one field, <code class="markup--code markup--li-code">hello</code>, and it’s on the <code class="markup--code markup--li-code">Query</code> type</li><li name="95d4" id="95d4" class="graf graf--li graf-after--li">The function is called, and it returns a result</li><li name="7d3e" id="7d3e" class="graf graf--li graf-after--li">The GraphQL library and server attaches that result to a response that matches the shape of the query</li></ol><p name="ee95" id="ee95" class="graf graf--p graf-after--li">So you would get back:</p><pre name="f65b" id="f65b" class="graf graf--pre graf-after--p">{ &quot;hello&quot;: &quot;Hello, world!&quot; }</pre><p name="4543" id="4543" class="graf graf--p graf-after--pre">But here’s one trick, we can actually call the field twice!</p><pre name="d1ac" id="d1ac" class="graf graf--pre graf-after--p">query {<br>  hello<br>  secondHello: hello<br>}</pre><p name="3a39" id="3a39" class="graf graf--p graf-after--pre">In this case, the same lifecycle happens as above, but since we’ve requested the same field twice using an alias, the <code class="markup--code markup--p-code">hello</code> resolver is actually called <em class="markup--em markup--p-em">twice</em>. This is clearly a contrived example, but the point is that multiple fields can be executed in one request, and the same field can be called multiple times at different points in the query.</p><p name="b879" id="b879" class="graf graf--p graf-after--p">This wouldn’t be complete without an example of “nested” resolvers:</p><pre name="f1c5" id="f1c5" class="graf graf--pre graf-after--p">{<br>  Query: {<br>    author: (root, { id }) =&gt; find(authors, { id: id }),<br>  },<br>  Author: {<br>    posts: (author) =&gt; filter(posts, { authorId: author.id }),<br>  },<br>}</pre><p name="4a02" id="4a02" class="graf graf--p graf-after--pre">These resolvers would be able to fulfill a query like:</p><pre name="ef0c" id="ef0c" class="graf graf--pre graf-after--p">query {<br>  author(id: 1) {<br>    firstName<br>    posts {<br>      title<br>    }<br>  }<br>}</pre><p name="d81d" id="d81d" class="graf graf--p graf-after--pre">So even though the set of resolvers is actually flat, because they are attached to various types you can build them up into nested queries. Read more about how GraphQL execution works in the post <a href="https://dev-blog.apollodata.com/graphql-explained-5844742f195e" data-href="https://dev-blog.apollodata.com/graphql-explained-5844742f195e" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">“GraphQL Explained”</a>.</p><p name="ae2c" id="ae2c" class="graf graf--p graf-after--p"><a href="https://launchpad.graphql.com/1jzxrj179" data-href="https://launchpad.graphql.com/1jzxrj179" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank"><em class="markup--em markup--p-em">See a complete example and run different queries to test this out!</em></a></p><figure name="f694" id="f694" class="graf graf--figure graf-after--p"><div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 350px;"><div class="aspectRatioPlaceholder-fill" style="padding-bottom: 50%;"></div><div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*qpyJSVVPkd5c6ItMmivnYg.png" data-width="800" data-height="400" data-is-featured="true" data-action="zoom" data-action-value="1*qpyJSVVPkd5c6ItMmivnYg.png"><img src="https://cdn-images-1.medium.com/freeze/max/60/1*qpyJSVVPkd5c6ItMmivnYg.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail"><canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1600/1*qpyJSVVPkd5c6ItMmivnYg.png"><noscript class="js-progressiveMedia-inner"><img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/1600/1*qpyJSVVPkd5c6ItMmivnYg.png"></noscript></div></div><figcaption class="imageCaption">An artists’ interpretation of fetching resources with multiple REST roundtrips vs. one GraphQL request</figcaption></figure><h4 name="b95b" id="b95b" class="graf graf--h4 graf-after--figure">Conclusion</h4><p name="2d5b" id="2d5b" class="graf graf--p graf-after--h4">At the end of the day, both REST and GraphQL APIs are just fancy ways to call functions over a network. If you’re familiar with building a REST API, implementing a GraphQL API won’t feel too different. But GraphQL has a big leg up because it lets you call several related functions without multiple roundtrips.</p><ul class="postList"><li name="3bc9" id="3bc9" class="graf graf--li graf-after--p"><strong class="markup--strong markup--li-strong">Similar:</strong> Endpoints in REST and fields in GraphQL both end up calling functions on the server.</li><li name="2767" id="2767" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">Similar: </strong>Both REST and GraphQL usually rely on frameworks and libraries to handle the nitty-gritty networking boilerplate.</li><li name="c9a4" id="c9a4" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">Different:</strong> In REST, each request usually calls exactly one route handler function. In GraphQL, one query can call many resolvers to construct a nested response with multiple resources.</li><li name="d83d" id="d83d" class="graf graf--li graf-after--li"><strong class="markup--strong markup--li-strong">Different:</strong> In REST, you construct the shape of the response yourself. In GraphQL, the shape of the response is built up by the GraphQL execution library to match the shape of the query.</li></ul><p name="b5e2" id="b5e2" class="graf graf--p graf-after--li graf--trailing">Essentially, you can think of GraphQL as a system for calling many nested endpoints in one request. Almost like a multiplexed REST.</p></div></div></section><section name="4603" class="section section--body section--last"><div class="section-divider"><hr class="section-divider"></div><div class="section-content"><div class="section-inner sectionLayout--insetColumn"><h3 name="b21f" id="b21f" class="graf graf--h3 graf--leading">What does this all mean?</h3><p name="f0d9" id="f0d9" class="graf graf--p graf-after--h3">There are a lot of things we didn’t have space to get into in this particular post. For example, object identification, hypermedia, or caching. Perhaps that will be a topic for a later time. But I hope you agree that when you take a look at the basics, REST and GraphQL are working with fundamentally similar concepts.</p><p name="1042" id="1042" class="graf graf--p graf-after--p">I think some of the differences are in GraphQL’s favor. In particular, I think it’s really cool that you can implement your API as a set of small resolver functions, and then have the ability to send a complex query that retrieves multiple resources at once in a predictable way. This saves the API implementer from having to create multiple endpoints with specific shapes, and enables the API consumer to avoid fetching extra data they don’t need.</p><p name="cc1e" id="cc1e" class="graf graf--p graf-after--p">On the other hand, GraphQL doesn’t have as many tools and integrations as REST yet. For example, you can’t cache GraphQL results using HTTP caching as easily as you can REST results. But the community is working hard on better tools and infrastructure. For example, you can cache GraphQL results in your frontend using <a href="http://www.apollographql.com/client" data-href="http://www.apollographql.com/client" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">Apollo Client</a> and <a href="https://facebook.github.io/relay/" data-href="https://facebook.github.io/relay/" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">Relay,</a> and more recently also on the server with <a href="https://dev-blog.apollodata.com/introducing-apollo-engine-insights-error-reporting-and-caching-for-graphql-6a55147f63fc" data-href="https://dev-blog.apollodata.com/introducing-apollo-engine-insights-error-reporting-and-caching-for-graphql-6a55147f63fc" class="markup--anchor markup--p-anchor" rel="noopener" target="_blank">Apollo Engine</a>.</p><p name="c693" id="c693" class="graf graf--p graf-after--p">Got any more ideas about comparisons between REST and GraphQL? Please post them in the comments!</p><figure name="4f57" id="4f57" class="graf graf--figure graf-after--p graf--trailing"><div class="aspectRatioPlaceholder is-locked" style="max-width: 700px; max-height: 491px;"><div class="aspectRatioPlaceholder-fill" style="padding-bottom: 70.1%;"></div><a href="https://www.apollographql.com/engine?utm_source=medium&amp;utm_medium=social&amp;utm_campaign=engine-feat-201804" data-href="https://www.apollographql.com/engine?utm_source=medium&amp;utm_medium=social&amp;utm_campaign=engine-feat-201804" class="graf-imageAnchor" data-action="image-link" data-action-observe-only="true"><div class="progressiveMedia js-progressiveMedia graf-image" data-image-id="1*zHlANoouusZ92unyBjkL5A.png" data-width="950" data-height="666"><img src="https://cdn-images-1.medium.com/freeze/max/60/1*zHlANoouusZ92unyBjkL5A.png?q=20" crossorigin="anonymous" class="progressiveMedia-thumbnail js-progressiveMedia-thumbnail"><canvas class="progressiveMedia-canvas js-progressiveMedia-canvas"></canvas><img class="progressiveMedia-image js-progressiveMedia-image" data-src="https://cdn-images-1.medium.com/max/1600/1*zHlANoouusZ92unyBjkL5A.png"><noscript class="js-progressiveMedia-inner"><img class="progressiveMedia-noscript js-progressiveMedia-inner" src="https://cdn-images-1.medium.com/max/1600/1*zHlANoouusZ92unyBjkL5A.png"></noscript></div></a></div></figure></div></div></section></div><footer class="u-paddingTop10"><div class="container u-maxWidth740"><div class="row"><div class="col u-size12of12"><div class="postMetaInline postMetaInline--acknowledgments u-paddingTop5 u-paddingBottom20 js-postMetaAcknowledgments"><span data-tooltip="The following people helped the author by providing feedback before the story was published.">Thanks to</span> <span><a class="link u-baseColor--link"   href="https://medium.com/@helfer?source=post_page" data-action="show-user-card" data-action-source="post_page" data-action-value="39cbd38c57c8" data-action-type="hover" data-user-id="39cbd38c57c8" dir="auto">Jonas Helfer</a> and </span><span><a class="link u-baseColor--link"   href="https://medium.com/@martijnwalraven?source=post_page" data-action="show-user-card" data-action-source="post_page" data-action-value="592c66ff70d" data-action-type="hover" data-user-id="592c66ff70d" dir="auto">Martijn Walraven</a></span>. </div></div></div><div class="row"><div class="col u-size12of12 js-postTags"><div class="u-paddingBottom10"><ul class="tags tags--postTags tags--borderless"><li><a class="link u-baseColor--link"   href="https://blog.apollographql.com/tagged/graphql?source=post" data-action-source="post" data-collection-slug="apollo-stack">GraphQL</a></li><li><a class="link u-baseColor--link"   href="https://blog.apollographql.com/tagged/rest?source=post" data-action-source="post" data-collection-slug="apollo-stack">Rest</a></li><li><a class="link u-baseColor--link"   href="https://blog.apollographql.com/tagged/api?source=post" data-action-source="post" data-collection-slug="apollo-stack">API</a></li><li><a class="link u-baseColor--link"   href="https://blog.apollographql.com/tagged/react?source=post" data-action-source="post" data-collection-slug="apollo-stack">React</a></li><li><a class="link u-baseColor--link"   href="https://blog.apollographql.com/tagged/data?source=post" data-action-source="post" data-collection-slug="apollo-stack">Data</a></li></ul></div></div></div><section class="uiScale uiScale-ui--small uiScale-caption--regular u-borderTopLightest u-marginTop10 u-paddingTop20"><div class="ui-h3 u-textColorDarker u-fontSize22">Like what you read? Give Sashko Stubailo a round of applause.</div><p class="ui-body u-marginBottom20 u-textColorDark u-fontSize16">From a quick cheer to a standing ovation, clap to show how much you enjoyed this story.</p></section><div class="postActions js-postActionsFooter"><div class="u-flexCenter"><div class="u-flex1"><div class="multirecommend js-actionMultirecommend u-flexCenter u-width60" data-post-id="5d425123e34b" data-is-icon-29px="true" data-is-circle="true" data-has-recommend-list="true" data-source="post_actions_footer-----5d425123e34b---------------------clap_footer"><div class="u-relative u-foreground"><button class="button button--large button--circle button--withChrome u-baseColor--buttonNormal button--withIcon button--withSvgIcon clapButton js-actionMultirecommendButton clapButton--largePill u-relative u-foreground u-xs-paddingLeft13 u-width60 u-height60 u-accentColor--textNormal u-accentColor--buttonNormal clap-onboardingcollection"  data-action="sign-up-prompt" data-sign-in-action="multivote" data-requires-token="true" data-redirect="https://medium.com/_/vote/p/5d425123e34b" data-action-source="post_actions_footer-----5d425123e34b---------------------clap_footer" aria-label="Clap"><span class="button-defaultState"><span class="svgIcon svgIcon--clap svgIcon--33px u-relative u-topNegative2 u-xs-top0"><svg class="svgIcon-use" width="33" height="33" viewBox="0 0 33 33" ><path d="M28.86 17.342l-3.64-6.402c-.292-.433-.712-.729-1.163-.8a1.124 1.124 0 0 0-.889.213c-.63.488-.742 1.181-.33 2.061l1.222 2.587 1.4 2.46c2.234 4.085 1.511 8.007-2.145 11.663-.26.26-.526.49-.797.707 1.42-.084 2.881-.683 4.292-2.094 3.822-3.823 3.565-7.876 2.05-10.395zm-6.252 11.075c3.352-3.35 3.998-6.775 1.978-10.469l-3.378-5.945c-.292-.432-.712-.728-1.163-.8a1.122 1.122 0 0 0-.89.213c-.63.49-.742 1.182-.33 2.061l1.72 3.638a.502.502 0 0 1-.806.568l-8.91-8.91a1.335 1.335 0 0 0-1.887 1.886l5.292 5.292a.5.5 0 0 1-.707.707l-5.292-5.292-1.492-1.492c-.503-.503-1.382-.505-1.887 0a1.337 1.337 0 0 0 0 1.886l1.493 1.492 5.292 5.292a.499.499 0 0 1-.353.854.5.5 0 0 1-.354-.147L5.642 13.96a1.338 1.338 0 0 0-1.887 0 1.338 1.338 0 0 0 0 1.887l2.23 2.228 3.322 3.324a.499.499 0 0 1-.353.853.502.502 0 0 1-.354-.146l-3.323-3.324a1.333 1.333 0 0 0-1.886 0 1.325 1.325 0 0 0-.39.943c0 .356.138.691.39.943l6.396 6.397c3.528 3.53 8.86 5.313 12.821 1.353zM12.73 9.26l5.68 5.68-.49-1.037c-.518-1.107-.426-2.13.224-2.89l-3.303-3.304a1.337 1.337 0 0 0-1.886 0 1.326 1.326 0 0 0-.39.944c0 .217.067.42.165.607zm14.787 19.184c-1.599 1.6-3.417 2.392-5.353 2.392-.349 0-.7-.03-1.058-.082a7.922 7.922 0 0 1-3.667.887c-3.049 0-6.115-1.626-8.359-3.87l-6.396-6.397A2.315 2.315 0 0 1 2 19.724a2.327 2.327 0 0 1 1.923-2.296l-.875-.875a2.339 2.339 0 0 1 0-3.3 2.33 2.33 0 0 1 1.24-.647l-.139-.139c-.91-.91-.91-2.39 0-3.3.884-.884 2.421-.882 3.301 0l.138.14a2.335 2.335 0 0 1 3.948-1.24l.093.092c.091-.423.291-.828.62-1.157a2.336 2.336 0 0 1 3.3 0l3.384 3.386a2.167 2.167 0 0 1 1.271-.173c.534.086 1.03.354 1.441.765.11-.549.415-1.034.911-1.418a2.12 2.12 0 0 1 1.661-.41c.727.117 1.385.565 1.853 1.262l3.652 6.423c1.704 2.832 2.025 7.377-2.205 11.607zM13.217.484l-1.917.882 2.37 2.837-.454-3.719zm8.487.877l-1.928-.86-.44 3.697 2.368-2.837zM16.5 3.293L15.478-.005h2.044L16.5 3.293z" fill-rule="evenodd"/></svg></span></span><span class="button-activeState"><span class="svgIcon svgIcon--clapFilled svgIcon--33px u-relative u-topNegative2 u-xs-top0"><svg class="svgIcon-use" width="33" height="33" viewBox="0 0 33 33" ><g fill-rule="evenodd"><path d="M29.58 17.1l-3.854-6.78c-.365-.543-.876-.899-1.431-.989a1.491 1.491 0 0 0-1.16.281c-.42.327-.65.736-.7 1.207v.001l3.623 6.367c2.46 4.498 1.67 8.802-2.333 12.807-.265.265-.536.505-.81.728 1.973-.222 3.474-1.286 4.45-2.263 4.166-4.165 3.875-8.6 2.215-11.36zm-4.831.82l-3.581-6.3c-.296-.439-.725-.742-1.183-.815a1.105 1.105 0 0 0-.89.213c-.647.502-.755 1.188-.33 2.098l1.825 3.858a.601.601 0 0 1-.197.747.596.596 0 0 1-.77-.067L10.178 8.21c-.508-.506-1.393-.506-1.901 0a1.335 1.335 0 0 0-.393.95c0 .36.139.698.393.95v.001l5.61 5.61a.599.599 0 1 1-.848.847l-5.606-5.606c-.001 0-.002 0-.003-.002L5.848 9.375a1.349 1.349 0 0 0-1.902 0 1.348 1.348 0 0 0 0 1.901l1.582 1.582 5.61 5.61a.6.6 0 0 1-.848.848l-5.61-5.61c-.51-.508-1.393-.508-1.9 0a1.332 1.332 0 0 0-.394.95c0 .36.139.697.393.952l2.363 2.362c.002.001.002.002.002.003l3.52 3.52a.6.6 0 0 1-.848.847l-3.522-3.523h-.001a1.336 1.336 0 0 0-.95-.393 1.345 1.345 0 0 0-.949 2.295l6.779 6.78c3.715 3.713 9.327 5.598 13.49 1.434 3.527-3.528 4.21-7.13 2.086-11.015zM11.817 7.727c.06-.328.213-.64.466-.893.64-.64 1.755-.64 2.396 0l3.232 3.232c-.82.783-1.09 1.833-.764 2.992l-5.33-5.33z"/><path d="M13.285.48l-1.916.881 2.37 2.837z"/><path d="M21.719 1.361L19.79.501l-.44 3.697z"/><path d="M16.502 3.298L15.481 0h2.043z"/></g></svg></span></span></button><div class="clapUndo u-width60 u-round u-height32 u-absolute u-borderBox u-paddingRight5 u-transition--transform200Spring u-background--brandSageLighter js-clapUndo" style="top: 14px; padding: 2px;"><button class="button button--chromeless u-baseColor--buttonNormal button--withIcon button--withSvgIcon u-floatRight"  data-action="multivote-undo" data-action-value="5d425123e34b"><span class="svgIcon svgIcon--removeThin svgIcon--29px"><svg class="svgIcon-use" width="29" height="29" viewBox="0 0 29 29" ><path d="M20.13 8.11l-5.61 5.61-5.609-5.61-.801.801 5.61 5.61-5.61 5.61.801.8 5.61-5.609 5.61 5.61.8-.801-5.609-5.61 5.61-5.61" fill-rule="evenodd"/></svg></span></button></div></div><span class="u-textAlignCenter u-relative u-background js-actionMultirecommendCount u-marginLeft10"><button class="button button--chromeless u-baseColor--buttonNormal js-multirecommendCountButton"  data-action="show-recommends" data-action-value="5d425123e34b">6.2K</button></span></div></div><div class="buttonSet u-flex0"><button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon"  data-action="scroll-to-responses" data-action-source="post_actions_footer"><span class="svgIcon svgIcon--response svgIcon--29px"><svg class="svgIcon-use" width="29" height="29" viewBox="0 0 29 29" ><path d="M21.27 20.058c1.89-1.826 2.754-4.17 2.754-6.674C24.024 8.21 19.67 4 14.1 4 8.53 4 4 8.21 4 13.384c0 5.175 4.53 9.385 10.1 9.385 1.007 0 2-.14 2.95-.41.285.25.592.49.918.7 1.306.87 2.716 1.31 4.19 1.31.276-.01.494-.14.6-.36a.625.625 0 0 0-.052-.65c-.61-.84-1.042-1.71-1.282-2.58a5.417 5.417 0 0 1-.154-.75zm-3.85 1.324l-.083-.28-.388.12a9.72 9.72 0 0 1-2.85.424c-4.96 0-8.99-3.706-8.99-8.262 0-4.556 4.03-8.263 8.99-8.263 4.95 0 8.77 3.71 8.77 8.27 0 2.25-.75 4.35-2.5 5.92l-.24.21v.32c0 .07 0 .19.02.37.03.29.1.6.19.92.19.7.49 1.4.89 2.08-.93-.14-1.83-.49-2.67-1.06-.34-.22-.88-.48-1.16-.74z"/></svg></span></button><button class="button button--chromeless u-baseColor--buttonNormal"  data-action="scroll-to-responses">33</button><button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon u-xs-hide"  title="Share on Twitter" aria-label="Share on Twitter" data-action="share-on-twitter" data-action-source="post_actions_footer"><span class="svgIcon svgIcon--twitter svgIcon--29px"><svg class="svgIcon-use" width="29" height="29" viewBox="0 0 29 29" ><path d="M21.967 11.8c.018 5.93-4.607 11.18-11.177 11.18-2.172 0-4.25-.62-6.047-1.76l-.268.422-.038.5.186.013.168.012c.3.02.44.032.6.046 2.06-.026 3.95-.686 5.49-1.86l1.12-.85-1.4-.048c-1.57-.055-2.92-1.08-3.36-2.51l-.48.146-.05.5c.22.03.48.05.75.08.48-.02.87-.07 1.25-.15l2.33-.49-2.32-.49c-1.68-.35-2.91-1.83-2.91-3.55 0-.05 0-.01-.01.03l-.49-.1-.25.44c.63.36 1.35.57 2.07.58l1.7.04L7.4 13c-.978-.662-1.59-1.79-1.618-3.047a4.08 4.08 0 0 1 .524-1.8l-.825.07a12.188 12.188 0 0 0 8.81 4.515l.59.033-.06-.59v-.02c-.05-.43-.06-.63-.06-.87a3.617 3.617 0 0 1 6.27-2.45l.2.21.28-.06c1.01-.22 1.94-.59 2.73-1.09l-.75-.56c-.1.36-.04.89.12 1.36.23.68.58 1.13 1.17.85l-.21-.45-.42-.27c-.52.8-1.17 1.48-1.92 2L22 11l.016.28c.013.2.014.35 0 .52v.04zm.998.038c.018-.22.017-.417 0-.66l-.498.034.284.41a8.183 8.183 0 0 0 2.2-2.267l.97-1.48-1.6.755c.17-.08.3-.02.34.03a.914.914 0 0 1-.13-.292c-.1-.297-.13-.64-.1-.766l.36-1.254-1.1.695c-.69.438-1.51.764-2.41.963l.48.15a4.574 4.574 0 0 0-3.38-1.484 4.616 4.616 0 0 0-4.61 4.613c0 .29.02.51.08.984l.01.02.5-.06.03-.5c-3.17-.18-6.1-1.7-8.08-4.15l-.48-.56-.36.64c-.39.69-.62 1.48-.65 2.28.04 1.61.81 3.04 2.06 3.88l.3-.92c-.55-.02-1.11-.17-1.6-.45l-.59-.34-.14.67c-.02.08-.02.16 0 .24-.01 2.12 1.55 4.01 3.69 4.46l.1-.49-.1-.49c-.33.07-.67.12-1.03.14-.18-.02-.43-.05-.64-.07l-.76-.09.23.73c.57 1.84 2.29 3.14 4.28 3.21l-.28-.89a8.252 8.252 0 0 1-4.85 1.66c-.12-.01-.26-.02-.56-.05l-.17-.01-.18-.01L2.53 21l1.694 1.07a12.233 12.233 0 0 0 6.58 1.917c7.156 0 12.2-5.73 12.18-12.18l-.002.04z"/></svg></span></button><button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon u-xs-hide"  title="Share on Facebook" aria-label="Share on Facebook" data-action="share-on-facebook" data-action-source="post_actions_footer"><span class="svgIcon svgIcon--facebook svgIcon--29px"><svg class="svgIcon-use" width="29" height="29" viewBox="0 0 29 29" ><path d="M16.39 23.61v-5.808h1.846a.55.55 0 0 0 .546-.48l.36-2.797a.551.551 0 0 0-.547-.62H16.39V12.67c0-.67.12-.813.828-.813h1.474a.55.55 0 0 0 .55-.55V8.803a.55.55 0 0 0-.477-.545c-.436-.06-1.36-.116-2.22-.116-2.5 0-4.13 1.62-4.13 4.248v1.513H10.56a.551.551 0 0 0-.55.55v2.797c0 .304.248.55.55.55h1.855v5.76c-4.172-.96-7.215-4.7-7.215-9.1 0-5.17 4.17-9.36 9.31-9.36 5.14 0 9.31 4.19 9.31 9.36 0 4.48-3.155 8.27-7.43 9.15M14.51 4C8.76 4 4.1 8.684 4.1 14.46c0 5.162 3.75 9.523 8.778 10.32a.55.55 0 0 0 .637-.543v-6.985a.551.551 0 0 0-.55-.55H11.11v-1.697h1.855a.55.55 0 0 0 .55-.55v-2.063c0-2.02 1.136-3.148 3.03-3.148.567 0 1.156.027 1.597.06v1.453h-.924c-1.363 0-1.93.675-1.93 1.912v1.78c0 .3.247.55.55.55h2.132l-.218 1.69H15.84c-.305 0-.55.24-.55.55v7.02c0 .33.293.59.623.54 5.135-.7 9.007-5.11 9.007-10.36C24.92 8.68 20.26 4 14.51 4"/></svg></span></button><button class="button button--large button--dark button--chromeless u-baseColor--buttonDark button--withIcon button--withSvgIcon u-xs-show"  title="Share this story on Twitter or Facebook" aria-label="Share this story on Twitter or Facebook" data-action="show-share-popover" data-action-source="post_actions_footer"><span class="svgIcon svgIcon--share svgIcon--29px"><svg class="svgIcon-use" width="29" height="29" viewBox="0 0 29 29" ><path d="M20.385 8H19a.5.5 0 1 0 .011 1h1.39c.43 0 .84.168 1.14.473.31.305.48.71.48 1.142v10.77c0 .43-.17.837-.47 1.142-.3.305-.71.473-1.14.473H8.62c-.43 0-.84-.168-1.144-.473a1.603 1.603 0 0 1-.473-1.142v-10.77c0-.43.17-.837.48-1.142A1.599 1.599 0 0 1 8.62 9H10a.502.502 0 0 0 0-1H8.615c-.67 0-1.338.255-1.85.766-.51.51-.765 1.18-.765 1.85v10.77c0 .668.255 1.337.766 1.848.51.51 1.18.766 1.85.766h11.77c.668 0 1.337-.255 1.848-.766.51-.51.766-1.18.766-1.85v-10.77c0-.668-.255-1.337-.766-1.848A2.61 2.61 0 0 0 20.384 8zm-8.67-2.508L14 3.207v8.362c0 .27.224.5.5.5s.5-.23.5-.5V3.2l2.285 2.285a.49.49 0 0 0 .704-.001.511.511 0 0 0 0-.708l-3.14-3.14a.504.504 0 0 0-.71 0L11 4.776a.501.501 0 0 0 .71.706" fill-rule="evenodd"/></svg></span></button></div></div></div></div><div class="u-maxWidth740 u-paddingTop20 u-marginTop20 u-borderTopLightest container u-paddingBottom20 u-xs-paddingBottom10 js-postAttributionFooterContainer"><div class="row js-postFooterInfo"><div class="col u-size6of12 u-xs-size12of12"><li class="uiScale uiScale-ui--small uiScale-caption--regular u-block u-paddingBottom18 js-cardUser"><div class="u-marginLeft20 u-floatRight"><span class="followState js-followState" data-user-id="803918030a60"><button class="button button--small u-noUserSelect button--withChrome u-baseColor--buttonNormal button--withHover button--unblock js-unblockButton"  data-action="sign-up-prompt" data-sign-in-action="toggle-block-user" data-requires-token="true" data-redirect="https://blog.apollographql.com/graphql-vs-rest-5d425123e34b" data-action-source="footer_card"><span class="button-label  button-defaultState">Blocked</span><span class="button-label button-hoverState">Unblock</span></button><button class="button button--primary button--small u-noUserSelect button--withChrome u-accentColor--buttonNormal button--follow js-followButton"  data-action="sign-up-prompt" data-sign-in-action="toggle-subscribe-user" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/user/803918030a60" data-action-source="footer_card-803918030a60-------------------------follow_footer"><span class="button-label  button-defaultState js-buttonLabel">Follow</span><span class="button-label button-activeState">Following</span></button></span></div><div class="u-tableCell"><a class="link u-baseColor--link avatar"   href="https://blog.apollographql.com/@stubailo?source=footer_card" title="Go to the profile of Sashko Stubailo" aria-label="Go to the profile of Sashko Stubailo" data-action-source="footer_card" data-user-id="803918030a60" data-collection-slug="apollo-stack" dir="auto"><img  src="https://cdn-images-1.medium.com/fit/c/120/120/1*PY72Bc0gKLEQOBZ0m1P6rw@2x.jpeg" class="avatar-image avatar-image--small" alt="Go to the profile of Sashko Stubailo"></a></div><div class="u-tableCell u-verticalAlignMiddle u-breakWord u-paddingLeft15"><h3 class="ui-h3 u-fontSize18 u-lineHeightTighter u-marginBottom4"><a class="link link--primary u-accentColor--hoverTextNormal"   href="https://blog.apollographql.com/@stubailo" property="cc:attributionName" title="Go to the profile of Sashko Stubailo" aria-label="Go to the profile of Sashko Stubailo" rel="author cc:attributionUrl" data-user-id="803918030a60" data-collection-slug="apollo-stack" dir="auto">Sashko Stubailo</a></h3><p class="ui-body u-fontSize14 u-lineHeightBaseSans u-textColorDark u-marginBottom4">Open source lead at <a href="http://twitter.com/apollographql" target="_blank" title="Twitter profile for @apollographql">@apollographql</a> and <a href="http://twitter.com/meteorjs" target="_blank" title="Twitter profile for @meteorjs">@meteorjs</a>, <a rel="nofollow" href="https://github.com/stubailo">https://github.com/stubailo</a></p></div></li></div><div class="col u-size6of12 u-xs-size12of12 u-xs-marginTop30"><li class="uiScale uiScale-ui--small uiScale-caption--regular u-block u-paddingBottom18 js-cardCollection"><div class="u-marginLeft20 u-floatRight"><button class="button button--primary button--small u-noUserSelect button--withChrome u-accentColor--buttonNormal js-relationshipButton"  data-action="sign-up-prompt" data-sign-in-action="toggle-follow-collection" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/collection/apollo-stack" data-action-source="----3804c1b351c9----------------------follow_footer" data-collection-id="3804c1b351c9"><span class="button-label  js-buttonLabel">Follow</span></button></div><div class="u-tableCell "><a class="link u-baseColor--link avatar avatar--roundedRectangle"   href="https://blog.apollographql.com?source=footer_card" title="Go to Apollo GraphQL" aria-label="Go to Apollo GraphQL" data-action-source="footer_card" data-collection-slug="apollo-stack"><img src="https://cdn-images-1.medium.com/fit/c/120/120/1*h3E_KHKB9jNKTkXkhrY5gA.png" class="avatar-image u-size60x60" alt="Apollo GraphQL"></a></div><div class="u-tableCell u-verticalAlignMiddle u-breakWord u-paddingLeft15"><h3 class="ui-h3 u-fontSize18 u-lineHeightTighter u-marginBottom4"><a class="link link--primary u-accentColor--hoverTextNormal"   href="https://blog.apollographql.com?source=footer_card" rel="collection" data-action-source="footer_card" data-collection-slug="apollo-stack">Apollo GraphQL</a></h3><p class="ui-body u-fontSize14 u-lineHeightBaseSans u-textColorDark u-marginBottom4">We build Apollo Client, Engine, and Server to help you put GraphQL over REST.</p><div class="buttonSet"></div></div></li></div></div></div><div class="js-postFooterPlacements"></div><div class="u-padding0 u-clearfix u-backgroundGrayLightest u-print-hide supplementalPostContent js-responsesWrapper"></div><div class="supplementalPostContent js-heroPromo"></div></footer></article></main><aside class="u-marginAuto u-maxWidth1000 js-postLeftSidebar"><div class="u-foreground u-top0 u-transition--fadeOut300 u-fixed u-sm-hide u-marginLeftNegative12 js-postShareWidget"><ul><li class="u-textAlignCenter u-marginVertical10"><div class="multirecommend js-actionMultirecommend u-flexColumn u-marginBottom10 u-width60" data-post-id="5d425123e34b" data-is-icon-29px="true" data-is-vertical="true" data-is-circle="true" data-has-recommend-list="true" data-source="post_share_widget-----5d425123e34b---------------------clap_sidebar"><div class="u-relative u-foreground"><button class="button button--large button--circle button--withChrome u-baseColor--buttonNormal button--withIcon button--withSvgIcon clapButton js-actionMultirecommendButton clapButton--largePill u-relative u-foreground u-xs-paddingLeft13 u-width60 u-height60 u-accentColor--textNormal u-accentColor--buttonNormal"  data-action="sign-up-prompt" data-sign-in-action="multivote" data-requires-token="true" data-redirect="https://medium.com/_/vote/p/5d425123e34b" data-action-source="post_share_widget-----5d425123e34b---------------------clap_sidebar" aria-label="Clap"><span class="button-defaultState"><span class="svgIcon svgIcon--clap svgIcon--33px u-relative u-topNegative2 u-xs-top0"><svg class="svgIcon-use" width="33" height="33" viewBox="0 0 33 33" ><path d="M28.86 17.342l-3.64-6.402c-.292-.433-.712-.729-1.163-.8a1.124 1.124 0 0 0-.889.213c-.63.488-.742 1.181-.33 2.061l1.222 2.587 1.4 2.46c2.234 4.085 1.511 8.007-2.145 11.663-.26.26-.526.49-.797.707 1.42-.084 2.881-.683 4.292-2.094 3.822-3.823 3.565-7.876 2.05-10.395zm-6.252 11.075c3.352-3.35 3.998-6.775 1.978-10.469l-3.378-5.945c-.292-.432-.712-.728-1.163-.8a1.122 1.122 0 0 0-.89.213c-.63.49-.742 1.182-.33 2.061l1.72 3.638a.502.502 0 0 1-.806.568l-8.91-8.91a1.335 1.335 0 0 0-1.887 1.886l5.292 5.292a.5.5 0 0 1-.707.707l-5.292-5.292-1.492-1.492c-.503-.503-1.382-.505-1.887 0a1.337 1.337 0 0 0 0 1.886l1.493 1.492 5.292 5.292a.499.499 0 0 1-.353.854.5.5 0 0 1-.354-.147L5.642 13.96a1.338 1.338 0 0 0-1.887 0 1.338 1.338 0 0 0 0 1.887l2.23 2.228 3.322 3.324a.499.499 0 0 1-.353.853.502.502 0 0 1-.354-.146l-3.323-3.324a1.333 1.333 0 0 0-1.886 0 1.325 1.325 0 0 0-.39.943c0 .356.138.691.39.943l6.396 6.397c3.528 3.53 8.86 5.313 12.821 1.353zM12.73 9.26l5.68 5.68-.49-1.037c-.518-1.107-.426-2.13.224-2.89l-3.303-3.304a1.337 1.337 0 0 0-1.886 0 1.326 1.326 0 0 0-.39.944c0 .217.067.42.165.607zm14.787 19.184c-1.599 1.6-3.417 2.392-5.353 2.392-.349 0-.7-.03-1.058-.082a7.922 7.922 0 0 1-3.667.887c-3.049 0-6.115-1.626-8.359-3.87l-6.396-6.397A2.315 2.315 0 0 1 2 19.724a2.327 2.327 0 0 1 1.923-2.296l-.875-.875a2.339 2.339 0 0 1 0-3.3 2.33 2.33 0 0 1 1.24-.647l-.139-.139c-.91-.91-.91-2.39 0-3.3.884-.884 2.421-.882 3.301 0l.138.14a2.335 2.335 0 0 1 3.948-1.24l.093.092c.091-.423.291-.828.62-1.157a2.336 2.336 0 0 1 3.3 0l3.384 3.386a2.167 2.167 0 0 1 1.271-.173c.534.086 1.03.354 1.441.765.11-.549.415-1.034.911-1.418a2.12 2.12 0 0 1 1.661-.41c.727.117 1.385.565 1.853 1.262l3.652 6.423c1.704 2.832 2.025 7.377-2.205 11.607zM13.217.484l-1.917.882 2.37 2.837-.454-3.719zm8.487.877l-1.928-.86-.44 3.697 2.368-2.837zM16.5 3.293L15.478-.005h2.044L16.5 3.293z" fill-rule="evenodd"/></svg></span></span><span class="button-activeState"><span class="svgIcon svgIcon--clapFilled svgIcon--33px u-relative u-topNegative2 u-xs-top0"><svg class="svgIcon-use" width="33" height="33" viewBox="0 0 33 33" ><g fill-rule="evenodd"><path d="M29.58 17.1l-3.854-6.78c-.365-.543-.876-.899-1.431-.989a1.491 1.491 0 0 0-1.16.281c-.42.327-.65.736-.7 1.207v.001l3.623 6.367c2.46 4.498 1.67 8.802-2.333 12.807-.265.265-.536.505-.81.728 1.973-.222 3.474-1.286 4.45-2.263 4.166-4.165 3.875-8.6 2.215-11.36zm-4.831.82l-3.581-6.3c-.296-.439-.725-.742-1.183-.815a1.105 1.105 0 0 0-.89.213c-.647.502-.755 1.188-.33 2.098l1.825 3.858a.601.601 0 0 1-.197.747.596.596 0 0 1-.77-.067L10.178 8.21c-.508-.506-1.393-.506-1.901 0a1.335 1.335 0 0 0-.393.95c0 .36.139.698.393.95v.001l5.61 5.61a.599.599 0 1 1-.848.847l-5.606-5.606c-.001 0-.002 0-.003-.002L5.848 9.375a1.349 1.349 0 0 0-1.902 0 1.348 1.348 0 0 0 0 1.901l1.582 1.582 5.61 5.61a.6.6 0 0 1-.848.848l-5.61-5.61c-.51-.508-1.393-.508-1.9 0a1.332 1.332 0 0 0-.394.95c0 .36.139.697.393.952l2.363 2.362c.002.001.002.002.002.003l3.52 3.52a.6.6 0 0 1-.848.847l-3.522-3.523h-.001a1.336 1.336 0 0 0-.95-.393 1.345 1.345 0 0 0-.949 2.295l6.779 6.78c3.715 3.713 9.327 5.598 13.49 1.434 3.527-3.528 4.21-7.13 2.086-11.015zM11.817 7.727c.06-.328.213-.64.466-.893.64-.64 1.755-.64 2.396 0l3.232 3.232c-.82.783-1.09 1.833-.764 2.992l-5.33-5.33z"/><path d="M13.285.48l-1.916.881 2.37 2.837z"/><path d="M21.719 1.361L19.79.501l-.44 3.697z"/><path d="M16.502 3.298L15.481 0h2.043z"/></g></svg></span></span></button><div class="clapUndo u-width60 u-round u-height32 u-absolute u-borderBox u-paddingRight5 u-transition--transform200Spring u-background--brandSageLighter js-clapUndo" style="top: 14px; padding: 2px;"><button class="button button--chromeless u-baseColor--buttonNormal button--withIcon button--withSvgIcon u-floatRight"  data-action="multivote-undo" data-action-value="5d425123e34b"><span class="svgIcon svgIcon--removeThin svgIcon--29px"><svg class="svgIcon-use" width="29" height="29" viewBox="0 0 29 29" ><path d="M20.13 8.11l-5.61 5.61-5.609-5.61-.801.801 5.61 5.61-5.61 5.61.801.8 5.61-5.609 5.61 5.61.8-.801-5.609-5.61 5.61-5.61" fill-rule="evenodd"/></svg></span></button></div></div><span class="u-textAlignCenter u-relative u-background js-actionMultirecommendCount u-flexOrderNegative1 u-height20 u-marginBottom7"><button class="button button--chromeless u-baseColor--buttonNormal js-multirecommendCountButton u-block u-marginAuto"  data-action="show-recommends" data-action-value="5d425123e34b">6.2K</button></span></div></li><li class="u-textAlignCenter u-marginVertical10"><button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon"  title="Share on Twitter" aria-label="Share on Twitter" data-action="share-on-twitter" data-action-source="post_share_widget"><span class="svgIcon svgIcon--twitter svgIcon--29px"><svg class="svgIcon-use" width="29" height="29" viewBox="0 0 29 29" ><path d="M21.967 11.8c.018 5.93-4.607 11.18-11.177 11.18-2.172 0-4.25-.62-6.047-1.76l-.268.422-.038.5.186.013.168.012c.3.02.44.032.6.046 2.06-.026 3.95-.686 5.49-1.86l1.12-.85-1.4-.048c-1.57-.055-2.92-1.08-3.36-2.51l-.48.146-.05.5c.22.03.48.05.75.08.48-.02.87-.07 1.25-.15l2.33-.49-2.32-.49c-1.68-.35-2.91-1.83-2.91-3.55 0-.05 0-.01-.01.03l-.49-.1-.25.44c.63.36 1.35.57 2.07.58l1.7.04L7.4 13c-.978-.662-1.59-1.79-1.618-3.047a4.08 4.08 0 0 1 .524-1.8l-.825.07a12.188 12.188 0 0 0 8.81 4.515l.59.033-.06-.59v-.02c-.05-.43-.06-.63-.06-.87a3.617 3.617 0 0 1 6.27-2.45l.2.21.28-.06c1.01-.22 1.94-.59 2.73-1.09l-.75-.56c-.1.36-.04.89.12 1.36.23.68.58 1.13 1.17.85l-.21-.45-.42-.27c-.52.8-1.17 1.48-1.92 2L22 11l.016.28c.013.2.014.35 0 .52v.04zm.998.038c.018-.22.017-.417 0-.66l-.498.034.284.41a8.183 8.183 0 0 0 2.2-2.267l.97-1.48-1.6.755c.17-.08.3-.02.34.03a.914.914 0 0 1-.13-.292c-.1-.297-.13-.64-.1-.766l.36-1.254-1.1.695c-.69.438-1.51.764-2.41.963l.48.15a4.574 4.574 0 0 0-3.38-1.484 4.616 4.616 0 0 0-4.61 4.613c0 .29.02.51.08.984l.01.02.5-.06.03-.5c-3.17-.18-6.1-1.7-8.08-4.15l-.48-.56-.36.64c-.39.69-.62 1.48-.65 2.28.04 1.61.81 3.04 2.06 3.88l.3-.92c-.55-.02-1.11-.17-1.6-.45l-.59-.34-.14.67c-.02.08-.02.16 0 .24-.01 2.12 1.55 4.01 3.69 4.46l.1-.49-.1-.49c-.33.07-.67.12-1.03.14-.18-.02-.43-.05-.64-.07l-.76-.09.23.73c.57 1.84 2.29 3.14 4.28 3.21l-.28-.89a8.252 8.252 0 0 1-4.85 1.66c-.12-.01-.26-.02-.56-.05l-.17-.01-.18-.01L2.53 21l1.694 1.07a12.233 12.233 0 0 0 6.58 1.917c7.156 0 12.2-5.73 12.18-12.18l-.002.04z"/></svg></span></button></li><li class="u-textAlignCenter u-marginVertical10"><button class="button button--large button--dark button--chromeless is-touchIconBlackPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon"  title="Share on Facebook" aria-label="Share on Facebook" data-action="share-on-facebook" data-action-source="post_share_widget"><span class="svgIcon svgIcon--facebook svgIcon--29px"><svg class="svgIcon-use" width="29" height="29" viewBox="0 0 29 29" ><path d="M16.39 23.61v-5.808h1.846a.55.55 0 0 0 .546-.48l.36-2.797a.551.551 0 0 0-.547-.62H16.39V12.67c0-.67.12-.813.828-.813h1.474a.55.55 0 0 0 .55-.55V8.803a.55.55 0 0 0-.477-.545c-.436-.06-1.36-.116-2.22-.116-2.5 0-4.13 1.62-4.13 4.248v1.513H10.56a.551.551 0 0 0-.55.55v2.797c0 .304.248.55.55.55h1.855v5.76c-4.172-.96-7.215-4.7-7.215-9.1 0-5.17 4.17-9.36 9.31-9.36 5.14 0 9.31 4.19 9.31 9.36 0 4.48-3.155 8.27-7.43 9.15M14.51 4C8.76 4 4.1 8.684 4.1 14.46c0 5.162 3.75 9.523 8.778 10.32a.55.55 0 0 0 .637-.543v-6.985a.551.551 0 0 0-.55-.55H11.11v-1.697h1.855a.55.55 0 0 0 .55-.55v-2.063c0-2.02 1.136-3.148 3.03-3.148.567 0 1.156.027 1.597.06v1.453h-.924c-1.363 0-1.93.675-1.93 1.912v1.78c0 .3.247.55.55.55h2.132l-.218 1.69H15.84c-.305 0-.55.24-.55.55v7.02c0 .33.293.59.623.54 5.135-.7 9.007-5.11 9.007-10.36C24.92 8.68 20.26 4 14.51 4"/></svg></span></button></li><li class="u-textAlignCenter u-marginVertical10"><button class="button button--large button--dark button--chromeless is-touchIconFadeInPulse u-baseColor--buttonDark button--withIcon button--withSvgIcon button--bookmark js-bookmarkButton"  title="Bookmark this story to read later" aria-label="Bookmark this story to read later" data-action="sign-up-prompt" data-sign-in-action="add-to-bookmarks" data-requires-token="true" data-redirect="https://medium.com/_/bookmark/p/5d425123e34b" data-action-source="post_share_widget-----5d425123e34b---------------------bookmark_sidebar"><span class="button-defaultState"><span class="svgIcon svgIcon--bookmark svgIcon--29px"><svg class="svgIcon-use" width="29" height="29" viewBox="0 0 29 29" ><path d="M19.385 4h-9.77A2.623 2.623 0 0 0 7 6.615V23.01a1.022 1.022 0 0 0 1.595.847l5.905-4.004 5.905 4.004A1.022 1.022 0 0 0 22 23.011V6.62A2.625 2.625 0 0 0 19.385 4zM21 23l-5.91-3.955-.148-.107a.751.751 0 0 0-.884 0l-.147.107L8 23V6.615C8 5.725 8.725 5 9.615 5h9.77C20.275 5 21 5.725 21 6.615V23z" fill-rule="evenodd"/></svg></span></span><span class="button-activeState"><span class="svgIcon svgIcon--bookmarkFilled svgIcon--29px"><svg class="svgIcon-use" width="29" height="29" viewBox="0 0 29 29" ><path d="M19.385 4h-9.77A2.623 2.623 0 0 0 7 6.615V23.01a1.022 1.022 0 0 0 1.595.847l5.905-4.004 5.905 4.004A1.022 1.022 0 0 0 22 23.011V6.62A2.625 2.625 0 0 0 19.385 4z" fill-rule="evenodd"/></svg></span></span></button></li></ul></div></aside><div class="u-fixed u-bottom0 u-sizeFullWidth u-backgroundWhite u-boxShadowTop u-borderBox u-paddingTop10 u-paddingBottom10 u-zIndexMetabar u-xs-paddingLeft10 u-xs-paddingRight10 js-stickyFooter"><div class="u-maxWidth700 u-marginAuto u-flexCenter"><div class="u-fontSize16 u-flex1 u-flexCenter"><div class="u-flex0 u-inlineBlock u-paddingRight20 u-xs-paddingRight10"><a class="link u-baseColor--link avatar avatar--roundedRectangle"   href="https://blog.apollographql.com" title="Go to Apollo GraphQL" aria-label="Go to Apollo GraphQL" data-collection-slug="apollo-stack"><img src="https://cdn-images-1.medium.com/fit/c/80/80/1*h3E_KHKB9jNKTkXkhrY5gA.png" class="avatar-image avatar-image--smaller" alt="Apollo GraphQL"></a></div><div class="u-flex1 u-inlineBlock"><div class="u-xs-hide">Never miss a story from<strong> Apollo GraphQL</strong>, when you sign up for Medium. <a class="link u-baseColor--link link--accent u-accentColor--textNormal u-accentColor--textDarken"   href="https://medium.com/@Medium/personalize-your-medium-experience-with-users-publications-tags-26a41ab1ee0c#.hx4zuv3mg" data-action-source="sticky_footer">Learn more</a></div><div class="u-xs-show">Never miss a story from<strong> Apollo GraphQL</strong></div></div></div><div class="u-marginLeft50 u-xs-marginAuto"><button class="button button--primary button--dark is-active u-noUserSelect button--withChrome u-accentColor--buttonDark u-uiTextSemibold u-textUppercase u-fontSize12 button--followCollection js-followCollectionButton"  data-action="sign-up-prompt" data-sign-in-action="toggle-subscribe-collection" data-requires-token="true" data-redirect="https://medium.com/_/subscribe/collection/apollo-stack" data-action-source="sticky_footer----3804c1b351c9----------------------follow_metabar"><span class="button-label  button-defaultState js-buttonLabel">Get updates</span><span class="button-label button-activeState">Get updates</span></button></div></div></div><style class="js-collectionStyle">
.u-accentColor--borderLight {border-color: #737DE2 !important;}
.u-accentColor--borderNormal {border-color: #737DE2 !important;}
.u-accentColor--borderDark {border-color: #646CBC !important;}
.u-accentColor--iconLight .svgIcon,.u-accentColor--iconLight.svgIcon {fill: #737DE2 !important;}
.u-accentColor--iconNormal .svgIcon,.u-accentColor--iconNormal.svgIcon {fill: #737DE2 !important;}
.u-accentColor--iconDark .svgIcon,.u-accentColor--iconDark.svgIcon {fill: #646CBC !important;}
.u-accentColor--textNormal {color: #646CBC !important;}
.u-accentColor--hoverTextNormal:hover {color: #646CBC !important;}
.u-accentColor--textNormal.u-accentColor--textDarken:hover {color: #5C64A9 !important;}
.u-accentColor--textDark {color: #5C64A9 !important;}
.u-accentColor--backgroundLight {background-color: #737DE2 !important;}
.u-accentColor--backgroundNormal {background-color: #737DE2 !important;}
.u-accentColor--backgroundDark {background-color: #646CBC !important;}
.u-accentColor--buttonDark {border-color: #646CBC !important; color: #5C64A9 !important;}
.u-accentColor--buttonDark:hover {border-color: #5C64A9 !important;}
.u-accentColor--buttonDark .icon:before,.u-accentColor--buttonDark .svgIcon{color: #646CBC !important; fill: #646CBC !important;}
.u-accentColor--buttonNormal:not(.clapButton--largePill) {border-color: #737DE2 !important; color: #646CBC !important;}
.u-accentColor--buttonNormal:hover {border-color: #646CBC !important;}
.u-accentColor--buttonNormal .icon:before,.u-accentColor--buttonNormal .svgIcon{color: #737DE2 !important; fill: #737DE2 !important;}
.u-accentColor--buttonNormal.button--filled .icon:before,.u-accentColor--buttonNormal.button--filled .svgIcon{color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-accentColor--buttonDark.button--filled,.u-accentColor--buttonDark.button--withChrome.is-active,.u-accentColor--fillWhenActive.is-active {background-color: #646CBC !important; border-color: #646CBC !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-accentColor--buttonNormal.button--filled:not(.clapButton--largePill),.u-accentColor--buttonNormal.button--withChrome.is-active:not(.clapButton--largePill) {background-color: #737DE2 !important; border-color: #737DE2 !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.postArticle.is-withAccentColors .markup--user,.postArticle.is-withAccentColors .markup--query {color: #646CBC !important;}.u-tintBgColor {background-color: rgba(34, 10, 130, 1) !important;}.u-tintBgColor .u-fadeLeft:before {background-image: linear-gradient(to right, rgba(34, 10, 130, 1) 0%, rgba(34, 10, 130, 0) 100%) !important;}.u-tintBgColor .u-fadeRight:after {background-image: linear-gradient(to right, rgba(34, 10, 130, 0) 0%, rgba(34, 10, 130, 1) 100%) !important;}
.u-tintSpectrum .u-baseColor--borderLight {border-color: #949CD3 !important;}
.u-tintSpectrum .u-baseColor--borderNormal {border-color: #BFC5EE !important;}
.u-tintSpectrum .u-baseColor--borderDark {border-color: #E8EBFF !important;}
.u-tintSpectrum .u-baseColor--iconLight .svgIcon,.u-tintSpectrum .u-baseColor--iconLight.svgIcon {fill: #949CD3 !important;}
.u-tintSpectrum .u-baseColor--iconNormal .svgIcon,.u-tintSpectrum .u-baseColor--iconNormal.svgIcon {fill: #BFC5EE !important;}
.u-tintSpectrum .u-baseColor--iconDark .svgIcon,.u-tintSpectrum .u-baseColor--iconDark.svgIcon {fill: #E8EBFF !important;}
.u-tintSpectrum .u-baseColor--textNormal {color: #BFC5EE !important;}
.u-tintSpectrum .u-baseColor--textNormal.u-baseColor--textDarken:hover {color: #FCFEFF !important;}
.u-tintSpectrum .u-baseColor--textDark {color: #FCFEFF !important;}
.u-tintSpectrum .u-baseColor--textDarker {color: #FCFEFF !important;}
.u-tintSpectrum .u-baseColor--backgroundLight {background-color: #949CD3 !important;}
.u-tintSpectrum .u-baseColor--backgroundNormal {background-color: #BFC5EE !important;}
.u-tintSpectrum .u-baseColor--backgroundDark {background-color: #E8EBFF !important;}
.u-tintSpectrum .u-baseColor--buttonLight {border-color: #949CD3 !important; color: #949CD3 !important;}
.u-tintSpectrum .u-baseColor--buttonLight:hover {border-color: #949CD3 !important;}
.u-tintSpectrum .u-baseColor--buttonLight .icon:before,.u-tintSpectrum .u-baseColor--buttonLight .svgIcon {color: #949CD3 !important; fill: #949CD3 !important;}
.u-tintSpectrum .u-baseColor--buttonDark {border-color: #E8EBFF !important; color: #FCFEFF !important;}
.u-tintSpectrum .u-baseColor--buttonDark:hover {border-color: #FCFEFF !important;}
.u-tintSpectrum .u-baseColor--buttonDark .icon:before,.u-tintSpectrum .u-baseColor--buttonDark .svgIcon {color: #E8EBFF !important; fill: #E8EBFF !important;}
.u-tintSpectrum .u-baseColor--buttonNormal {border-color: #BFC5EE !important; color: #BFC5EE !important;}
.u-tintSpectrum .u-baseColor--buttonNormal:hover {border-color: #E8EBFF !important;}
.u-tintSpectrum .u-baseColor--buttonNormal .icon:before,.u-tintSpectrum .u-baseColor--buttonNormal .svgIcon {color: #BFC5EE !important; fill: #BFC5EE !important;}
.u-tintSpectrum .u-baseColor--buttonDark.button--filled,.u-tintSpectrum .u-baseColor--buttonDark.button--withChrome.is-active {background-color: #E8EBFF !important; border-color: #E8EBFF !important; color: rgba(34, 10, 130, 1) !important; fill: rgba(34, 10, 130, 1) !important;}
.u-tintSpectrum .u-baseColor--buttonNormal.button--filled,.u-tintSpectrum .u-baseColor--buttonNormal.button--withChrome.is-active {background-color: #BFC5EE !important; border-color: #BFC5EE !important; color: rgba(34, 10, 130, 1) !important; fill: rgba(34, 10, 130, 1) !important;}
.u-tintSpectrum .u-baseColor--link {color: #BFC5EE !important;}
.u-tintSpectrum .u-baseColor--link.link--darkenOnHover:hover {color: #FCFEFF !important;}
.u-tintSpectrum .u-baseColor--link.link--darken:hover,.u-tintSpectrum .u-baseColor--link.link--darken:focus,.u-tintSpectrum .u-baseColor--link.link--darken:active {color: #FCFEFF !important;}
.u-tintSpectrum .u-baseColor--link.link--dark {color: #FCFEFF !important;}
.u-tintSpectrum .u-baseColor--link.link--dark.link--darken:hover,.u-tintSpectrum .u-baseColor--link.link--dark.link--darken:focus,.u-tintSpectrum .u-baseColor--link.link--dark.link--darken:active {color: #FCFEFF !important;}
.u-tintSpectrum .u-baseColor--link.link--darker {color: #FCFEFF !important;}
.u-tintSpectrum .u-baseColor--placeholderNormal ::-webkit-input-placeholder {color: #949CD3;}
.u-tintSpectrum .u-baseColor--placeholderNormal ::-moz-placeholder {color: #949CD3;}
.u-tintSpectrum .u-baseColor--placeholderNormal :-ms-input-placeholder {color: #949CD3;}
.u-tintSpectrum .svgIcon--logoNew path:nth-child(1) {stroke: none !important; fill: #4E56A4 !important;}
.u-tintSpectrum .svgIcon--logoNew path:nth-child(2) {stroke: none !important; fill: #666FB5 !important;}
.u-tintSpectrum .svgIcon--logoNew path:nth-child(3) {stroke: none !important; fill: #949CD3 !important;}
.u-tintSpectrum .svgIcon--logoNew path:nth-child(4) {stroke: none !important; fill: #BFC5EE !important;}
.u-tintSpectrum .svgIcon--logoWordmark {stroke: none !important; fill: #FCFEFF !important;}
.u-tintSpectrum .svgIcon--logoMonogram {stroke: none !important; fill: #FCFEFF !important;}
.u-tintSpectrum  .ui-h1,.u-tintSpectrum  .ui-h2,.u-tintSpectrum  .ui-h3,.u-tintSpectrum  .ui-h4,.u-tintSpectrum  .ui-brand1,.u-tintSpectrum  .ui-brand2,.u-tintSpectrum  .ui-captionStrong {color: #FCFEFF !important; fill: #FCFEFF !important;}
.u-tintSpectrum  .ui-body,.u-tintSpectrum  .ui-caps {color: #FCFEFF !important; fill: #FCFEFF !important;}
.u-tintSpectrum  .ui-summary,.u-tintSpectrum  .ui-caption {color: #949CD3 !important; fill: #949CD3 !important;}
.u-tintSpectrum .u-accentColor--borderLight {border-color: #949CD3 !important;}
.u-tintSpectrum .u-accentColor--borderNormal {border-color: #BFC5EE !important;}
.u-tintSpectrum .u-accentColor--borderDark {border-color: #E8EBFF !important;}
.u-tintSpectrum .u-accentColor--iconLight .svgIcon,.u-tintSpectrum .u-accentColor--iconLight.svgIcon {fill: #949CD3 !important;}
.u-tintSpectrum .u-accentColor--iconNormal .svgIcon,.u-tintSpectrum .u-accentColor--iconNormal.svgIcon {fill: #BFC5EE !important;}
.u-tintSpectrum .u-accentColor--iconDark .svgIcon,.u-tintSpectrum .u-accentColor--iconDark.svgIcon {fill: #E8EBFF !important;}
.u-tintSpectrum .u-accentColor--textNormal {color: #BFC5EE !important;}
.u-tintSpectrum .u-accentColor--hoverTextNormal:hover {color: #BFC5EE !important;}
.u-tintSpectrum .u-accentColor--textNormal.u-accentColor--textDarken:hover {color: #FCFEFF !important;}
.u-tintSpectrum .u-accentColor--textDark {color: #FCFEFF !important;}
.u-tintSpectrum .u-accentColor--backgroundLight {background-color: #949CD3 !important;}
.u-tintSpectrum .u-accentColor--backgroundNormal {background-color: #BFC5EE !important;}
.u-tintSpectrum .u-accentColor--backgroundDark {background-color: #E8EBFF !important;}
.u-tintSpectrum .u-accentColor--buttonDark {border-color: #E8EBFF !important; color: #FCFEFF !important;}
.u-tintSpectrum .u-accentColor--buttonDark:hover {border-color: #FCFEFF !important;}
.u-tintSpectrum .u-accentColor--buttonDark .icon:before,.u-tintSpectrum .u-accentColor--buttonDark .svgIcon{color: #E8EBFF !important; fill: #E8EBFF !important;}
.u-tintSpectrum .u-accentColor--buttonNormal:not(.clapButton--largePill) {border-color: #BFC5EE !important; color: #BFC5EE !important;}
.u-tintSpectrum .u-accentColor--buttonNormal:hover {border-color: #E8EBFF !important;}
.u-tintSpectrum .u-accentColor--buttonNormal .icon:before,.u-tintSpectrum .u-accentColor--buttonNormal .svgIcon{color: #BFC5EE !important; fill: #BFC5EE !important;}
.u-tintSpectrum .u-accentColor--buttonNormal.button--filled .icon:before,.u-tintSpectrum .u-accentColor--buttonNormal.button--filled .svgIcon{color: rgba(34, 10, 130, 1) !important; fill: rgba(34, 10, 130, 1) !important;}
.u-tintSpectrum .u-accentColor--buttonDark.button--filled,.u-tintSpectrum .u-accentColor--buttonDark.button--withChrome.is-active,.u-tintSpectrum .u-accentColor--fillWhenActive.is-active {background-color: #E8EBFF !important; border-color: #E8EBFF !important; color: rgba(34, 10, 130, 1) !important; fill: rgba(34, 10, 130, 1) !important;}
.u-tintSpectrum .u-accentColor--buttonNormal.button--filled:not(.clapButton--largePill),.u-tintSpectrum .u-accentColor--buttonNormal.button--withChrome.is-active:not(.clapButton--largePill) {background-color: #BFC5EE !important; border-color: #BFC5EE !important; color: rgba(34, 10, 130, 1) !important; fill: rgba(34, 10, 130, 1) !important;}
.u-tintSpectrum .postArticle.is-withAccentColors .markup--user,.u-tintSpectrum .postArticle.is-withAccentColors .markup--query {color: #BFC5EE !important;}
.u-accentColor--highlightFaint {background-color: rgba(236, 239, 255, 1) !important;}
.u-accentColor--highlightStrong.is-active .svgIcon {fill: rgba(208, 220, 255, 1) !important;}
.postArticle.is-withAccentColors .markup--quote.is-other {background-color: rgba(236, 239, 255, 1) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .markup--quote.is-other {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(236, 239, 255, 1), rgba(236, 239, 255, 1));}
.postArticle.is-withAccentColors .markup--quote.is-me {background-color: rgba(221, 229, 255, 1) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .markup--quote.is-me {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(221, 229, 255, 1), rgba(221, 229, 255, 1));}
.postArticle.is-withAccentColors .markup--quote.is-targeted {background-color: rgba(208, 220, 255, 1) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .markup--quote.is-targeted {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(208, 220, 255, 1), rgba(208, 220, 255, 1));}
.postArticle.is-withAccentColors .markup--quote.is-selected {background-color: rgba(208, 220, 255, 1) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .markup--quote.is-selected {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(208, 220, 255, 1), rgba(208, 220, 255, 1));}
.postArticle.is-withAccentColors .markup--highlight {background-color: rgba(208, 220, 255, 1) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .markup--highlight {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(208, 220, 255, 1), rgba(208, 220, 255, 1));}.u-baseColor--iconNormal.avatar-halo {fill: rgba(0, 0, 0, 0.4980392156862745) !important;}</style><style class="js-collectionStyleConstant">.u-imageBgColor {background-color: rgba(0, 0, 0, 0.24705882352941178);}
.u-imageSpectrum .u-baseColor--borderLight {border-color: rgba(255, 255, 255, 0.6980392156862745) !important;}
.u-imageSpectrum .u-baseColor--borderNormal {border-color: rgba(255, 255, 255, 0.8980392156862745) !important;}
.u-imageSpectrum .u-baseColor--borderDark {border-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--iconLight .svgIcon,.u-imageSpectrum .u-baseColor--iconLight.svgIcon {fill: rgba(255, 255, 255, 0.8) !important;}
.u-imageSpectrum .u-baseColor--iconNormal .svgIcon,.u-imageSpectrum .u-baseColor--iconNormal.svgIcon {fill: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--iconDark .svgIcon,.u-imageSpectrum .u-baseColor--iconDark.svgIcon {fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--textNormal {color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--textNormal.u-baseColor--textDarken:hover {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--textDark {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--textDarker {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--backgroundLight {background-color: rgba(255, 255, 255, 0.8980392156862745) !important;}
.u-imageSpectrum .u-baseColor--backgroundNormal {background-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--backgroundDark {background-color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--buttonLight {border-color: rgba(255, 255, 255, 0.6980392156862745) !important; color: rgba(255, 255, 255, 0.8) !important;}
.u-imageSpectrum .u-baseColor--buttonLight:hover {border-color: rgba(255, 255, 255, 0.6980392156862745) !important;}
.u-imageSpectrum .u-baseColor--buttonLight .icon:before,.u-imageSpectrum .u-baseColor--buttonLight .svgIcon {color: rgba(255, 255, 255, 0.8) !important; fill: rgba(255, 255, 255, 0.8) !important;}
.u-imageSpectrum .u-baseColor--buttonDark {border-color: rgba(255, 255, 255, 0.9490196078431372) !important; color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--buttonDark:hover {border-color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--buttonDark .icon:before,.u-imageSpectrum .u-baseColor--buttonDark .svgIcon {color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--buttonNormal {border-color: rgba(255, 255, 255, 0.8980392156862745) !important; color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--buttonNormal:hover {border-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--buttonNormal .icon:before,.u-imageSpectrum .u-baseColor--buttonNormal .svgIcon {color: rgba(255, 255, 255, 0.9490196078431372) !important; fill: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--buttonDark.button--filled,.u-imageSpectrum .u-baseColor--buttonDark.button--withChrome.is-active {background-color: rgba(255, 255, 255, 1) !important; border-color: rgba(255, 255, 255, 1) !important; color: rgba(0, 0, 0, 0.24705882352941178) !important; fill: rgba(0, 0, 0, 0.24705882352941178) !important;}
.u-imageSpectrum .u-baseColor--buttonNormal.button--filled,.u-imageSpectrum .u-baseColor--buttonNormal.button--withChrome.is-active {background-color: rgba(255, 255, 255, 0.9490196078431372) !important; border-color: rgba(255, 255, 255, 0.9490196078431372) !important; color: rgba(0, 0, 0, 0.24705882352941178) !important; fill: rgba(0, 0, 0, 0.24705882352941178) !important;}
.u-imageSpectrum .u-baseColor--link {color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-baseColor--link.link--darkenOnHover:hover {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--link.link--darken:hover,.u-imageSpectrum .u-baseColor--link.link--darken:focus,.u-imageSpectrum .u-baseColor--link.link--darken:active {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--link.link--dark {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--link.link--dark.link--darken:hover,.u-imageSpectrum .u-baseColor--link.link--dark.link--darken:focus,.u-imageSpectrum .u-baseColor--link.link--dark.link--darken:active {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--link.link--darker {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-baseColor--placeholderNormal ::-webkit-input-placeholder {color: rgba(255, 255, 255, 0.8);}
.u-imageSpectrum .u-baseColor--placeholderNormal ::-moz-placeholder {color: rgba(255, 255, 255, 0.8);}
.u-imageSpectrum .u-baseColor--placeholderNormal :-ms-input-placeholder {color: rgba(255, 255, 255, 0.8);}
.u-imageSpectrum .svgIcon--logoNew path:nth-child(1) {stroke: none !important; fill: rgba(255, 255, 255, 0.4) !important;}
.u-imageSpectrum .svgIcon--logoNew path:nth-child(2) {stroke: none !important; fill: rgba(255, 255, 255, 0.4980392156862745) !important;}
.u-imageSpectrum .svgIcon--logoNew path:nth-child(3) {stroke: none !important; fill: rgba(255, 255, 255, 0.6980392156862745) !important;}
.u-imageSpectrum .svgIcon--logoNew path:nth-child(4) {stroke: none !important; fill: rgba(255, 255, 255, 0.8980392156862745) !important;}
.u-imageSpectrum .svgIcon--logoWordmark {stroke: none !important; fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .svgIcon--logoMonogram {stroke: none !important; fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum  .ui-h1,.u-imageSpectrum  .ui-h2,.u-imageSpectrum  .ui-h3,.u-imageSpectrum  .ui-h4,.u-imageSpectrum  .ui-brand1,.u-imageSpectrum  .ui-brand2,.u-imageSpectrum  .ui-captionStrong {color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum  .ui-body,.u-imageSpectrum  .ui-caps {color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum  .ui-summary,.u-imageSpectrum  .ui-caption {color: rgba(255, 255, 255, 0.8) !important; fill: rgba(255, 255, 255, 0.8) !important;}
.u-imageSpectrum .u-accentColor--borderLight {border-color: rgba(255, 255, 255, 0.6980392156862745) !important;}
.u-imageSpectrum .u-accentColor--borderNormal {border-color: rgba(255, 255, 255, 0.8980392156862745) !important;}
.u-imageSpectrum .u-accentColor--borderDark {border-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--iconLight .svgIcon,.u-imageSpectrum .u-accentColor--iconLight.svgIcon {fill: rgba(255, 255, 255, 0.8) !important;}
.u-imageSpectrum .u-accentColor--iconNormal .svgIcon,.u-imageSpectrum .u-accentColor--iconNormal.svgIcon {fill: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--iconDark .svgIcon,.u-imageSpectrum .u-accentColor--iconDark.svgIcon {fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--textNormal {color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--hoverTextNormal:hover {color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--textNormal.u-accentColor--textDarken:hover {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--textDark {color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--backgroundLight {background-color: rgba(255, 255, 255, 0.8980392156862745) !important;}
.u-imageSpectrum .u-accentColor--backgroundNormal {background-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--backgroundDark {background-color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--buttonDark {border-color: rgba(255, 255, 255, 0.9490196078431372) !important; color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--buttonDark:hover {border-color: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--buttonDark .icon:before,.u-imageSpectrum .u-accentColor--buttonDark .svgIcon{color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-imageSpectrum .u-accentColor--buttonNormal:not(.clapButton--largePill) {border-color: rgba(255, 255, 255, 0.8980392156862745) !important; color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--buttonNormal:hover {border-color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--buttonNormal .icon:before,.u-imageSpectrum .u-accentColor--buttonNormal .svgIcon{color: rgba(255, 255, 255, 0.9490196078431372) !important; fill: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--buttonNormal.button--filled .icon:before,.u-imageSpectrum .u-accentColor--buttonNormal.button--filled .svgIcon{color: rgba(0, 0, 0, 0.24705882352941178) !important; fill: rgba(0, 0, 0, 0.24705882352941178) !important;}
.u-imageSpectrum .u-accentColor--buttonDark.button--filled,.u-imageSpectrum .u-accentColor--buttonDark.button--withChrome.is-active,.u-imageSpectrum .u-accentColor--fillWhenActive.is-active {background-color: rgba(255, 255, 255, 1) !important; border-color: rgba(255, 255, 255, 1) !important; color: rgba(0, 0, 0, 0.24705882352941178) !important; fill: rgba(0, 0, 0, 0.24705882352941178) !important;}
.u-imageSpectrum .u-accentColor--buttonNormal.button--filled:not(.clapButton--largePill),.u-imageSpectrum .u-accentColor--buttonNormal.button--withChrome.is-active:not(.clapButton--largePill) {background-color: rgba(255, 255, 255, 0.9490196078431372) !important; border-color: rgba(255, 255, 255, 0.9490196078431372) !important; color: rgba(0, 0, 0, 0.24705882352941178) !important; fill: rgba(0, 0, 0, 0.24705882352941178) !important;}
.u-imageSpectrum .postArticle.is-withAccentColors .markup--user,.u-imageSpectrum .postArticle.is-withAccentColors .markup--query {color: rgba(255, 255, 255, 0.9490196078431372) !important;}
.u-imageSpectrum .u-accentColor--highlightFaint {background-color: rgba(255, 255, 255, 0.2) !important;}
.u-imageSpectrum .u-accentColor--highlightStrong.is-active .svgIcon {fill: rgba(255, 255, 255, 0.6) !important;}
.postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-other {background-color: rgba(255, 255, 255, 0.2) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-other {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.2), rgba(255, 255, 255, 0.2));}
.postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-me {background-color: rgba(255, 255, 255, 0.4) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-me {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.4), rgba(255, 255, 255, 0.4));}
.postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-targeted {background-color: rgba(255, 255, 255, 0.6) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-targeted {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0.6));}
.postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-selected {background-color: rgba(255, 255, 255, 0.6) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .u-imageSpectrum .markup--quote.is-selected {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0.6));}
.postArticle.is-withAccentColors .u-imageSpectrum .markup--highlight {background-color: rgba(255, 255, 255, 0.6) !important;}
body.is-withMagicUnderlines .postArticle.is-withAccentColors .u-imageSpectrum .markup--highlight {background-color: transparent !important; background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.6), rgba(255, 255, 255, 0.6));}.u-resetSpectrum .u-tintBgColor {background-color: rgba(255, 255, 255, 1) !important;}.u-resetSpectrum .u-tintBgColor .u-fadeLeft:before {background-image: linear-gradient(to right, rgba(255, 255, 255, 1) 0%, rgba(255, 255, 255, 0) 100%) !important;}.u-resetSpectrum .u-tintBgColor .u-fadeRight:after {background-image: linear-gradient(to right, rgba(255, 255, 255, 0) 0%, rgba(255, 255, 255, 1) 100%) !important;}
.u-resetSpectrum .u-baseColor--borderLight {border-color: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--borderNormal {border-color: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--borderDark {border-color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--iconLight .svgIcon,.u-resetSpectrum .u-baseColor--iconLight.svgIcon {fill: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--iconNormal .svgIcon,.u-resetSpectrum .u-baseColor--iconNormal.svgIcon {fill: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--iconDark .svgIcon,.u-resetSpectrum .u-baseColor--iconDark.svgIcon {fill: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--textNormal {color: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--textNormal.u-baseColor--textDarken:hover {color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--textDark {color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--textDarker {color: rgba(0, 0, 0, 0.8) !important;}
.u-resetSpectrum .u-baseColor--backgroundLight {background-color: rgba(0, 0, 0, 0.09803921568627451) !important;}
.u-resetSpectrum .u-baseColor--backgroundNormal {background-color: rgba(0, 0, 0, 0.2) !important;}
.u-resetSpectrum .u-baseColor--backgroundDark {background-color: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonLight {border-color: rgba(0, 0, 0, 0.2980392156862745) !important; color: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonLight:hover {border-color: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonLight .icon:before,.u-resetSpectrum .u-baseColor--buttonLight .svgIcon {color: rgba(0, 0, 0, 0.2980392156862745) !important; fill: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonDark {border-color: rgba(0, 0, 0, 0.6) !important; color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--buttonDark:hover {border-color: rgba(0, 0, 0, 0.8) !important;}
.u-resetSpectrum .u-baseColor--buttonDark .icon:before,.u-resetSpectrum .u-baseColor--buttonDark .svgIcon {color: rgba(0, 0, 0, 0.6) !important; fill: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--buttonNormal {border-color: rgba(0, 0, 0, 0.4980392156862745) !important; color: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonNormal:hover {border-color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--buttonNormal .icon:before,.u-resetSpectrum .u-baseColor--buttonNormal .svgIcon {color: rgba(0, 0, 0, 0.4980392156862745) !important; fill: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--buttonDark.button--filled,.u-resetSpectrum .u-baseColor--buttonDark.button--withChrome.is-active {background-color: rgba(0, 0, 0, 0.2980392156862745) !important; border-color: rgba(0, 0, 0, 0.2980392156862745) !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-resetSpectrum .u-baseColor--buttonNormal.button--filled,.u-resetSpectrum .u-baseColor--buttonNormal.button--withChrome.is-active {background-color: rgba(0, 0, 0, 0.2) !important; border-color: rgba(0, 0, 0, 0.2) !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-resetSpectrum .u-baseColor--link {color: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .u-baseColor--link.link--darkenOnHover:hover {color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--link.link--darken:hover,.u-resetSpectrum .u-baseColor--link.link--darken:focus,.u-resetSpectrum .u-baseColor--link.link--darken:active {color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--link.link--dark {color: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .u-baseColor--link.link--dark.link--darken:hover,.u-resetSpectrum .u-baseColor--link.link--dark.link--darken:focus,.u-resetSpectrum .u-baseColor--link.link--dark.link--darken:active {color: rgba(0, 0, 0, 0.8) !important;}
.u-resetSpectrum .u-baseColor--link.link--darker {color: rgba(0, 0, 0, 0.8) !important;}
.u-resetSpectrum .u-baseColor--placeholderNormal ::-webkit-input-placeholder {color: rgba(0, 0, 0, 0.2980392156862745);}
.u-resetSpectrum .u-baseColor--placeholderNormal ::-moz-placeholder {color: rgba(0, 0, 0, 0.2980392156862745);}
.u-resetSpectrum .u-baseColor--placeholderNormal :-ms-input-placeholder {color: rgba(0, 0, 0, 0.2980392156862745);}
.u-resetSpectrum .svgIcon--logoNew path:nth-child(1) {stroke: none !important; fill: rgba(0, 0, 0, 0.2) !important;}
.u-resetSpectrum .svgIcon--logoNew path:nth-child(2) {stroke: none !important; fill: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .svgIcon--logoNew path:nth-child(3) {stroke: none !important; fill: rgba(0, 0, 0, 0.4) !important;}
.u-resetSpectrum .svgIcon--logoNew path:nth-child(4) {stroke: none !important; fill: rgba(0, 0, 0, 0.4980392156862745) !important;}
.u-resetSpectrum .svgIcon--logoWordmark {stroke: none !important; fill: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum .svgIcon--logoMonogram {stroke: none !important; fill: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum  .ui-h1,.u-resetSpectrum  .ui-h2,.u-resetSpectrum  .ui-h3,.u-resetSpectrum  .ui-h4,.u-resetSpectrum  .ui-brand1,.u-resetSpectrum  .ui-brand2,.u-resetSpectrum  .ui-captionStrong {color: rgba(0, 0, 0, 0.8) !important; fill: rgba(0, 0, 0, 0.8) !important;}
.u-resetSpectrum  .ui-body,.u-resetSpectrum  .ui-caps {color: rgba(0, 0, 0, 0.6) !important; fill: rgba(0, 0, 0, 0.6) !important;}
.u-resetSpectrum  .ui-summary,.u-resetSpectrum  .ui-caption {color: rgba(0, 0, 0, 0.2980392156862745) !important; fill: rgba(0, 0, 0, 0.2980392156862745) !important;}
.u-resetSpectrum .u-accentColor--borderLight {border-color: rgba(2, 184, 117, 1) !important;}
.u-resetSpectrum .u-accentColor--borderNormal {border-color: rgba(2, 184, 117, 1) !important;}
.u-resetSpectrum .u-accentColor--borderDark {border-color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--iconLight .svgIcon,.u-resetSpectrum .u-accentColor--iconLight.svgIcon {fill: rgba(2, 184, 117, 1) !important;}
.u-resetSpectrum .u-accentColor--iconNormal .svgIcon,.u-resetSpectrum .u-accentColor--iconNormal.svgIcon {fill: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--iconDark .svgIcon,.u-resetSpectrum .u-accentColor--iconDark.svgIcon {fill: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--textNormal {color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--hoverTextNormal:hover {color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--textNormal.u-accentColor--textDarken:hover {color: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--textDark {color: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--backgroundLight {background-color: rgba(2, 184, 117, 1) !important;}
.u-resetSpectrum .u-accentColor--backgroundNormal {background-color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--backgroundDark {background-color: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonDark {border-color: rgba(0, 171, 107, 1) !important; color: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonDark:hover {border-color: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonDark .icon:before,.u-resetSpectrum .u-accentColor--buttonDark .svgIcon{color: rgba(28, 153, 99, 1) !important; fill: rgba(28, 153, 99, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonNormal:not(.clapButton--largePill) {border-color: rgba(2, 184, 117, 1) !important; color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonNormal:hover {border-color: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonNormal .icon:before,.u-resetSpectrum .u-accentColor--buttonNormal .svgIcon{color: rgba(0, 171, 107, 1) !important; fill: rgba(0, 171, 107, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonNormal.button--filled .icon:before,.u-resetSpectrum .u-accentColor--buttonNormal.button--filled .svgIcon{color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonDark.button--filled,.u-resetSpectrum .u-accentColor--buttonDark.button--withChrome.is-active,.u-resetSpectrum .u-accentColor--fillWhenActive.is-active {background-color: rgba(28, 153, 99, 1) !important; border-color: rgba(28, 153, 99, 1) !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-resetSpectrum .u-accentColor--buttonNormal.button--filled:not(.clapButton--largePill),.u-resetSpectrum .u-accentColor--buttonNormal.button--withChrome.is-active:not(.clapButton--largePill) {background-color: rgba(0, 171, 107, 1) !important; border-color: rgba(0, 171, 107, 1) !important; color: rgba(255, 255, 255, 1) !important; fill: rgba(255, 255, 255, 1) !important;}
.u-resetSpectrum .postArticle.is-withAccentColors .markup--user,.u-resetSpectrum .postArticle.is-withAccentColors .markup--query {color: rgba(0, 171, 107, 1) !important;}</style></div></div></div><div class="loadingBar"></div><script>// <![CDATA[
window["obvInit"] = function (opt_embedded) {window["obvInit"]["embedded"] = opt_embedded; window["obvInit"]["ready"] = true;}
// ]]></script><script>// <![CDATA[
var GLOBALS = {"audioUrl":"https://d1fcbxp97j4nb2.cloudfront.net","baseUrl":"https://blog.apollographql.com","buildLabel":"34312","currentUser":{"userId":"lo_UbGWuDXe1fGU","isVerified":false,"subscriberEmail":"","hasPastMemberships":false,"isEnrolledInHightower":false,"isEligibleForHightower":false,"hightowerLastLockedAt":0,"isWriterProgramEnrolled":false,"isWriterProgramInvited":false},"currentUserHasUnverifiedEmail":false,"isAuthenticated":false,"isCurrentUserVerified":false,"language":"fr-fr","miroUrl":"https://cdn-images-1.medium.com","moduleUrls":{"base":"https://cdn-static-1.medium.com/_/fp/gen-js/main-base.bundle.sxpMJKc3TJwhHqTw9f75nA.js","common-async":"https://cdn-static-1.medium.com/_/fp/gen-js/main-common-async.bundle.9X_GL3mbvxLaN2o84rr8uw.js","hightower":"https://cdn-static-1.medium.com/_/fp/gen-js/main-hightower.bundle.X-h_I0dZCKbYsb6MhJ2Dyw.js","home-screens":"https://cdn-static-1.medium.com/_/fp/gen-js/main-home-screens.bundle.LM3Y0KRAQDqDOG1oFkEL9Q.js","misc-screens":"https://cdn-static-1.medium.com/_/fp/gen-js/main-misc-screens.bundle.gRI2mGhCJIAOFv2VZyB4xA.js","notes":"https://cdn-static-1.medium.com/_/fp/gen-js/main-notes.bundle.Pdx4GC2OEQUvf-fUW7-00Q.js","payments":"https://cdn-static-1.medium.com/_/fp/gen-js/main-payments.bundle.-oBI5CTMRfB4d6sNhnF1Uw.js","posters":"https://cdn-static-1.medium.com/_/fp/gen-js/main-posters.bundle.RhCOGyQyK24uFxeJ87NGGg.js","power-readers":"https://cdn-static-1.medium.com/_/fp/gen-js/main-power-readers.bundle.9cvbuc4mN1p4dW4HYG8SWA.js","pubs":"https://cdn-static-1.medium.com/_/fp/gen-js/main-pubs.bundle.cxeXU1BxVKqnziugQLbtDA.js","stats":"https://cdn-static-1.medium.com/_/fp/gen-js/main-stats.bundle.l0zw6Vlso4zHwFN_ie45Ag.js"},"previewConfig":{"weightThreshold":1,"weightImageParagraph":0.51,"weightIframeParagraph":0.8,"weightTextParagraph":0.08,"weightEmptyParagraph":0,"weightP":0.003,"weightH":0.005,"weightBq":0.003,"minPTextLength":60,"truncateBoundaryChars":20,"detectTitle":true,"detectTitleLevThreshold":0.15},"productName":"Medium","supportsEdit":true,"termsUrl":"//medium.com/policy/9db0094a1e0f","textshotHost":"textshot.medium.com","transactionId":"1531626587657:97391279f362","useragent":{"browser":"chrome","family":"chrome","os":"windows","version":67,"supportsDesktopEdit":true,"supportsInteract":true,"supportsView":true,"isMobile":false,"isTablet":false,"isNative":false,"supportsFileAPI":true,"isTier1":true,"clientVersion":"","unknownParagraphsBad":false,"clientChannel":"","supportsRealScrollEvents":true,"supportsVhUnits":true,"ruinsViewportSections":false,"supportsHtml5Video":true,"supportsMagicUnderlines":true,"isWebView":false,"isFacebookWebView":false,"supportsProgressiveMedia":true,"supportsPromotedPosts":true,"isBot":false,"isNativeIphone":false,"supportsCssVariables":true,"supportsVideoSections":true,"emojiSupportLevel":1,"isSearchBot":false,"isSyndicationBot":false,"supportsScrollableMetabar":true},"variants":{"allow_access":true,"allow_signup":true,"allow_test_auth":"disallow","signin_services":"twitter,facebook,google,email,google-fastidv","signup_services":"twitter,facebook,google,email,google-fastidv","android_rating_prompt_recommend_threshold":5,"google_sign_in_android":true,"reengagement_notification_duration":3,"browsable_stream_config_bucket":"curated-topics","enable_dedicated_series_tab_api_ios":true,"enable_post_import":true,"available_monthly_plan":"60e220181034","available_annual_plan":"2c754bcc2995","disable_ios_resume_reading_toast":true,"is_not_medium_subscriber":true,"disable_followed_tag_fan_out":true,"glyph_font_set":"m2","enable_branding":true,"enable_branding_fonts":true,"enable_sequence_carousel":true,"enable_multirecommends":true,"enable_post_monger_v2":true,"enable_post_monger_v3":true,"enable_fastrak_beta":true,"enable_fastrak_lock_tiered_post_in_pub":true,"enable_user_post_metering":true,"max_premium_content_per_user_under_metering":3,"tag_intercom_user_on_metering_count":3,"enable_automated_mission_control_triggers":true,"enable_topic_writer_onboarding":true,"enable_strong_graph_chp_reorder":true,"enable_top_stories_for_you":true,"enable_ios_member_post_labeling":true,"enable_lite_profile":true,"enable_li_search_collection":true,"enable_homepage_remodel":true,"enable_signin_wall_custom_domain":true,"enable_standalone_profile_edit_page":true,"enable_standalone_user_follow_pages":true,"enable_post_footer_copy":true,"app_download_email_template":"control","enable_topic_lifecycle_email":true,"enable_marketing_emails":true,"enable_curation_post_locking":true,"ios_hide_avatars_on_home":true,"raise_editors_picks_digest":"control","android_disable_author_avatars":true,"enable_quality_pool_filters":true,"enable_truncated_rss_for_tags_and_topics":true,"enable_ios_related_reads_api_change":true,"enable_ios_related_reads_ui_large":true,"enable_ios_responses_collapsed":true,"enable_ios_preview_image_in_push_notifications":true,"enable_ios_title_subtitle_in_push_notifications_inverted":true,"enable_hightower_friend_link":true,"enable_metered_posts_in_pubs":true,"enable_metered_posts_in_pubs_conversion_on_rescind":true,"enable_rex_service_homefeed":true,"enable_parsely":true,"enable_wednesday_wisdom":true,"enable_curation_master_feed":true,"enable_july_meter_email_test":true,"enable_send_editors_picks_to_all_users":true,"accelerate_membership_headline_test":"feeds-headline"},"xsrfToken":"","iosAppId":"828256236","supportEmail":"yourfriends@medium.com","fp":{"/icons/monogram-mask.svg":"https://cdn-static-1.medium.com/_/fp/icons/monogram-mask.KPLCSFEZviQN0jQ7veN2RQ.svg","/icons/favicon-dev-editor.ico":"https://cdn-static-1.medium.com/_/fp/icons/favicon-dev-editor.YKKRxBO8EMvIqhyCwIiJeQ.ico","/icons/favicon-hatch-editor.ico":"https://cdn-static-1.medium.com/_/fp/icons/favicon-hatch-editor.BuEyHIqlyh2s_XEk4Rl32Q.ico","/icons/favicon-medium-editor.ico":"https://cdn-static-1.medium.com/_/fp/icons/favicon-medium-editor.PiakrZWB7Yb80quUVQWM6g.ico"},"authBaseUrl":"https://medium.com","imageUploadSizeMb":25,"isAuthDomainRequest":false,"domainCollectionSlug":"apollo-stack","algoliaApiEndpoint":"https://MQ57UUUQZ2-dsn.algolia.net","algoliaAppId":"MQ57UUUQZ2","algoliaSearchOnlyApiKey":"394474ced050e3911ae2249ecc774921","iosAppStoreUrl":"https://itunes.apple.com/app/medium-everyones-stories/id828256236?pt=698524&mt=8","iosAppLinkBaseUrl":"medium:","algoliaIndexPrefix":"medium_","androidPlayStoreUrl":"https://play.google.com/store/apps/details?id=com.medium.reader","googleClientId":"216296035834-k1k6qe060s2tp2a2jam4ljdcms00sttg.apps.googleusercontent.com","androidPackage":"com.medium.reader","androidPlayStoreMarketScheme":"market://details?id=com.medium.reader","googleAuthUri":"https://accounts.google.com/o/oauth2/auth","androidScheme":"medium","layoutData":{"useDynamicScripts":false,"googleAnalyticsTrackingCode":"UA-24232453-2","jsShivUrl":"https://cdn-static-1.medium.com/_/fp/js/shiv.RI2ePTZ5gFmMgLzG5bEVAA.js","useDynamicCss":false,"faviconUrl":"https://cdn-static-1.medium.com/_/fp/icons/favicon-rebrand-medium.3Y6xpZ-0FSdWDnPM3hSBIA.ico","faviconImageId":"1*8I-HPL0bfoIzGied-dzOvA.png","fontSets":[{"id":8,"url":"https://glyph.medium.com/css/e/sr/latin/e/ssr/latin/e/ssb/latin/m2.css"},{"id":11,"url":"https://glyph.medium.com/css/m2.css"},{"id":9,"url":"https://glyph.medium.com/css/mkt.css"},{"id":10,"url":"https://glyph.medium.com/css/elv8.css"}],"editorFaviconUrl":"https://cdn-static-1.medium.com/_/fp/icons/favicon-rebrand-medium-editor.3Y6xpZ-0FSdWDnPM3hSBIA.ico","glyphUrl":"https://glyph.medium.com"},"authBaseUrlRev":"moc.muidem//:sptth","isDnt":false,"stripePublishableKey":"pk_live_7FReX44VnNIInZwrIIx6ghjl","archiveUploadSizeMb":100,"paymentData":{"currencies":{"1":{"label":"US Dollar","external":"usd"}},"countries":{"1":{"label":"United States of America","external":"US"}},"accountTypes":{"1":{"label":"Individual","external":"individual"},"2":{"label":"Company","external":"company"}}},"previewConfig2":{"weightThreshold":1,"weightImageParagraph":0.05,"raiseImage":true,"enforceHeaderHierarchy":true,"isImageInsetRight":true},"isAmp":false,"iosScheme":"medium","isSwBoot":false,"lightstep":{"accessToken":"ce5be895bef60919541332990ac9fef2","carrier":"{\"ot-tracer-spanid\":\"4c736b006f66114f\",\"ot-tracer-traceid\":\"657e1c4d65a17f7a\",\"ot-tracer-sampled\":\"true\"}","host":"collector-medium.lightstep.com"},"facebook":{"key":"542599432471018","namespace":"medium-com","scope":{"default":["public_profile","email","user_friends"],"connect":["public_profile","email","user_friends"],"login":["public_profile","email","user_friends"],"share":["public_profile","email","user_friends","publish_actions"]}},"editorsPicksTopicId":"3985d2a191c5","popularOnMediumTopicId":"9d34e48ecf94","memberContentTopicId":"13d7efd82fb2","audioContentTopicId":"3792abbd134","brandedSequenceId":"7d337ddf1941","isDoNotAuth":false,"goldfinchUrl":"https://goldfinch.medium.com","buggle":{"url":"https://buggle.medium.com","videoUrl":"https://cdn-videos-1.medium.com","audioUrl":"https://cdn-audio-1.medium.com"},"referrerType":2,"isMeteredOut":false,"meterConfig":{"maxUnlockCount":3,"windowLength":"MONTHLY"},"partnerProgramEmail":"partnerprogram@medium.com","userResearchPrompts":[{"promptId":"lo_post_page_4","type":0,"url":"www.calendly.com"},{"promptId":"lo_home_page","type":1,"url":"www.calendly.com"},{"promptId":"lo_profile_page","type":2,"url":"www.calendly.com"}],"recaptchaKey":"6LdAokEUAAAAAC7seICd4vtC8chDb3jIXDQulyUJ","paypalClientMode":"production","signinWallCustomDomainCollectionIds":["3a8144eabfe3","336d898217ee","61061eb0c96b","138adf9c44c","819cc2aaeee0"],"countryCode":"CA","bypassMeter":false}
// ]]></script><script charset="UTF-8" src="https://cdn-static-1.medium.com/_/fp/gen-js/main-base.bundle.sxpMJKc3TJwhHqTw9f75nA.js" async></script><script>// <![CDATA[
window["obvInit"]({"value":{"id":"5d425123e34b","versionId":"b1d5c5544888","creatorId":"803918030a60","creator":{"userId":"803918030a60","name":"Sashko Stubailo","username":"stubailo","createdAt":1415595055615,"lastPostCreatedAt":1531620653269,"imageId":"1*PY72Bc0gKLEQOBZ0m1P6rw@2x.jpeg","backgroundImageId":"","bio":"Open source lead at @apollographql and @meteorjs, https://github.com/stubailo","twitterScreenName":"stubailo","socialStats":{"userId":"803918030a60","usersFollowedCount":426,"usersFollowedByCount":5297,"type":"SocialStats"},"social":{"userId":"lo_UbGWuDXe1fGU","targetUserId":"803918030a60","type":"Social"},"facebookAccountId":"10153739958494254","allowNotes":1,"isNsfw":false,"isWriterProgramInvited":false,"isPartnerProgramEnrolled":false,"isWriterProgramEnrolled":false,"type":"User"},"homeCollection":{"id":"3804c1b351c9","name":"Apollo GraphQL","slug":"apollo-stack","tags":["REACT","ANGULAR","GRAPHQL","REACTJS","ANGULARJS"],"creatorId":"803918030a60","description":"We build Apollo Client, Engine, and Server to help you put GraphQL over REST.","shortDescription":"We build Apollo Client, Engine, and Server to help you put…","image":{"imageId":"1*h3E_KHKB9jNKTkXkhrY5gA.png","filter":"","backgroundSize":"","originalWidth":1600,"originalHeight":1600,"strategy":"resample","height":0,"width":0},"metadata":{"followerCount":20038,"activeAt":1530634071781},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":false,"canRemove":false,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false,"canSendNewsletter":false,"canViewLockedPosts":false,"canViewCloaked":false,"canEditOwnPosts":false,"canBeAssignedAuthor":false,"canEnrollInHightower":false,"canLockPostsForMediumMembers":false,"canLockOwnPostsForMediumMembers":false},"isSubscribed":false,"isNewsletterSubscribed":false,"memberOfMembershipPlanId":"","isEnrolledInHightower":false,"isEligibleForHightower":false},"logo":{"imageId":"1*JVFm_pqNLKi4sobJzicbww.png","filter":"","backgroundSize":"","originalWidth":809,"originalHeight":239,"strategy":"resample","height":0,"width":0},"twitterUsername":"apollographql","facebookPageName":"apollographql","collectionMastheadId":"1d7785bfc122","domain":"blog.apollographql.com","sections":[{"type":2,"collectionHeaderMetadata":{"title":"","description":"We build Apollo Client, Engine, Server, and other tools for GraphQL developers.","backgroundImage":{},"logoImage":{"id":"1*ii79rz_-iauM21n4L3g9Ug@2x.png","originalWidth":904,"originalHeight":329,"alt":"Apollo GraphQL"},"alignment":2,"layout":5}},{"type":1,"postListMetadata":{"source":1,"layout":4,"number":1,"postIds":[]}},{"type":1,"postListMetadata":{"source":1,"layout":4,"number":6,"postIds":[]}},{"type":3,"promoMetadata":{"sectionHeader":"","promoId":"ae40014c9596"}},{"type":1,"postListMetadata":{"source":1,"layout":5,"number":6,"postIds":[]}},{"type":3,"promoMetadata":{"sectionHeader":"","promoId":"2145d661dab2"}},{"type":1,"postListMetadata":{"source":1,"layout":5,"number":6,"postIds":[]}}],"tintColor":"#FF220A82","lightText":true,"favicon":{"imageId":"1*h3E_KHKB9jNKTkXkhrY5gA.png","filter":"","backgroundSize":"","originalWidth":1600,"originalHeight":1600,"strategy":"resample","height":0,"width":0},"colorPalette":{"defaultBackgroundSpectrum":{"colorPoints":[{"color":"#FF737DE2","point":0},{"color":"#FF6B75CF","point":0.1},{"color":"#FF646CBC","point":0.2},{"color":"#FF5C64A9","point":0.3},{"color":"#FF535A97","point":0.4},{"color":"#FF4B5184","point":0.5},{"color":"#FF424772","point":0.6},{"color":"#FF383D5F","point":0.7},{"color":"#FF2E324D","point":0.8},{"color":"#FF23263A","point":0.9},{"color":"#FF171927","point":1}],"backgroundColor":"#FFFFFFFF"},"tintBackgroundSpectrum":{"colorPoints":[{"color":"#FF220A82","point":0},{"color":"#FF363992","point":0.1},{"color":"#FF4E56A4","point":0.2},{"color":"#FF666FB5","point":0.3},{"color":"#FF7D86C5","point":0.4},{"color":"#FF949CD3","point":0.5},{"color":"#FFAAB1E1","point":0.6},{"color":"#FFBFC5EE","point":0.7},{"color":"#FFD4D8FB","point":0.8},{"color":"#FFE8EBFF","point":0.9},{"color":"#FFFCFEFF","point":1}],"backgroundColor":"#FF220A82"},"highlightSpectrum":{"colorPoints":[{"color":"#FFEFF1FF","point":0},{"color":"#FFECEFFF","point":0.1},{"color":"#FFE9EDFF","point":0.2},{"color":"#FFE6EBFF","point":0.3},{"color":"#FFE3E9FF","point":0.4},{"color":"#FFE0E7FF","point":0.5},{"color":"#FFDDE5FF","point":0.6},{"color":"#FFD9E3FF","point":0.7},{"color":"#FFD6E0FF","point":0.8},{"color":"#FFD3DEFF","point":0.9},{"color":"#FFD0DCFF","point":1}],"backgroundColor":"#FFFFFFFF"}},"navItems":[{"type":4,"title":"Client","url":"https://blog.apollographql.com/client/home","topicId":"1550aa6c5ee1","source":"topicId"},{"type":4,"title":"Engine","url":"https://blog.apollographql.com/engine/home","topicId":"4fefed3b6136","source":"topicId"},{"type":4,"title":"Server","url":"https://blog.apollographql.com/server/home","topicId":"f3bd439dd7ee","source":"topicId"},{"type":3,"title":"apollographql.com","url":"https://www.apollographql.com"}],"colorBehavior":2,"instantArticlesState":0,"acceleratedMobilePagesState":0,"googleAnalyticsId":"UA-74643563-11","ampLogo":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"header":{"title":"","description":"We build Apollo Client, Engine, Server, and other tools for GraphQL developers.","backgroundImage":{},"logoImage":{"id":"1*ii79rz_-iauM21n4L3g9Ug@2x.png","originalWidth":904,"originalHeight":329,"alt":"Apollo GraphQL"},"alignment":2,"layout":5},"type":"Collection"},"homeCollectionId":"3804c1b351c9","title":"GraphQL vs. REST","detectedLanguage":"en","latestVersion":"b1d5c5544888","latestPublishedVersion":"b1d5c5544888","hasUnpublishedEdits":false,"latestRev":1234,"createdAt":1498327710665,"updatedAt":1529560794263,"acceptedAt":0,"firstPublishedAt":1498582789183,"latestPublishedAt":1523006087423,"vote":false,"experimentalCss":"","displayAuthor":"","content":{"subtitle":"Two ways to send data over HTTP: What’s the difference?","bodyModel":{"paragraphs":[{"name":"152d","type":3,"text":"GraphQL vs. REST","markups":[]},{"name":"0018","type":13,"text":"Two ways to send data over HTTP: What’s the difference?","markups":[]},{"name":"a443","type":1,"text":"Often, GraphQL is presented as a revolutionary new way to think about APIs. Instead of working with rigid server-defined endpoints, you can send queries to get exactly the data you’re looking for in one request. And it’s true — GraphQL can be transformative when adopted in an organization, enabling frontend and backend teams to collaborate more smoothly than ever before. But in practice, both of these technologies involve sending an HTTP request and receiving some result, and GraphQL has many elements of the REST model built in.","markups":[]},{"name":"e7eb","type":1,"text":"So what’s the real deal on a technical level? What are the similarities and differences between these two API paradigms? My claim by the end of the article is going to be that GraphQL and REST are not so different after all, but that GraphQL has some small changes that make a big difference to the developer experience of building and consuming an API.","markups":[]},{"name":"bf53","type":1,"text":"So let’s jump right in. We’ll identify some properties of an API, and then discuss how GraphQL and REST handle them.","markups":[]},{"name":"393a","type":3,"text":"Resources","markups":[]},{"name":"3a44","type":1,"text":"The core idea of REST is the resource. Each resource is identified by a URL, and you retrieve that resource by sending a GET request to that URL. You will likely get a JSON response, since that’s what most APIs are using these days. So it looks something like:","markups":[{"type":10,"start":121,"end":124}]},{"name":"3f31","type":8,"text":"GET /books/1","markups":[]},{"name":"368a","type":8,"text":"{\n  \"title\": \"Black Hole Blues\",\n  \"author\": { \n    \"firstName\": \"Janna\",\n    \"lastName\": \"Levin\"\n  }\n  // ... more fields here\n}","markups":[]},{"name":"36af","type":1,"text":"Note: In the example above, some REST APIs would return “author” as a separate resource.","markups":[{"type":2,"start":0,"end":88}]},{"name":"30fd","type":1,"text":"One thing to note in REST is that the type, or shape, of the resource and the way you fetch that resource are coupled. When you talk about the above in REST documentation, you might refer to it as the “book endpoint”.","markups":[]},{"name":"466f","type":1,"text":"GraphQL is quite different in this respect, because in GraphQL these two concepts are completely separate. In your schema, you might have Book and Author types:","markups":[{"type":10,"start":138,"end":142},{"type":10,"start":147,"end":153}]},{"name":"8a0d","type":8,"text":"type Book {\n  id: ID\n  title: String\n  published: Date\n  price: String\n  author: Author\n}","markups":[]},{"name":"951b","type":8,"text":"type Author {\n  id: ID\n  firstName: String\n  lastName: String\n  books: [Book]\n}","markups":[]},{"name":"8ec5","type":1,"text":"Notice that we have described the kinds of data available, but this description doesn’t tell you anything at all about how those objects might be fetched from a client. That’s one core difference between REST and GraphQL — the description of a particular resource is not coupled to the way you retrieve it.","markups":[]},{"name":"8aaf","type":1,"text":"To be able to actually access a particular book or author, we need to create a Query type in our schema:","markups":[{"type":10,"start":79,"end":84}]},{"name":"9950","type":8,"text":"type Query {\n  book(id: ID!): Book\n  author(id: ID!): Author\n}","markups":[]},{"name":"68df","type":1,"text":"Now, we can send a request similar to the REST request above, but with GraphQL this time:","markups":[]},{"name":"d86c","type":8,"text":"GET /graphql?query={ book(id: \"1\") { title, author { firstName } } }","markups":[]},{"name":"83c6","type":8,"text":"{\n  \"title\": \"Black Hole Blues\",\n  \"author\": {\n    \"firstName\": \"Janna\",\n  }\n}","markups":[]},{"name":"54a8","type":1,"text":"Nice, now we’re getting somewhere! We can immediately see a few things about GraphQL that are quite different from REST, even though both can be requested via URL, and both can return the same shape of JSON response.","markups":[]},{"name":"7a3f","type":1,"text":"First of all, we can see that the URL with a GraphQL query specifies the resource we’re asking for and also which fields we care about. Also, rather than the server author deciding for us that the related author resource needs to be included, the consumer of the API decides.","markups":[{"type":10,"start":205,"end":211}]},{"name":"98f9","type":1,"text":"But most importantly, the identities of the resources, the concepts of Books and Authors, are not coupled to the way they are fetched. We could potentially retrieve the same Book through many different types of queries, and with different sets of fields.","markups":[]},{"name":"9c2d","type":13,"text":"Conclusion","markups":[]},{"name":"f1cf","type":1,"text":"We’ve identified some similarities and differences already:","markups":[]},{"name":"4aa6","type":9,"text":"Similar: Both have the idea of a resource, and can specify IDs for those resources.","markups":[{"type":1,"start":0,"end":9}]},{"name":"bbd7","type":9,"text":"Similar: Both can be fetched via an HTTP GET request with a URL.","markups":[{"type":1,"start":0,"end":8}]},{"name":"afef","type":9,"text":"Similar: Both can return JSON data in the request.","markups":[{"type":1,"start":0,"end":9}]},{"name":"8363","type":9,"text":"Different: In REST, the endpoint you call is the identity of that object. In GraphQL, the identity is separate from how you fetch it.","markups":[{"type":1,"start":0,"end":10}]},{"name":"08d6","type":9,"text":"Different: In REST, the shape and size of the resource is determined by the server. In GraphQL, the server declares what resources are available, and the client asks for what it needs at the time.","markups":[{"type":1,"start":0,"end":10}]},{"name":"4cf4","type":1,"text":"Alright, this was pretty basic if you’ve already used GraphQL and/or REST. If you haven’t used GraphQL before, you can play around with an example similar to the above on Launchpad, a tool for building and exploring GraphQL examples in your browser.","markups":[{"type":3,"start":136,"end":167,"href":"https://launchpad.graphql.com/1jzxrj179","title":"","rel":"","anchorType":0}]},{"name":"69d1","type":3,"text":"URL Routes vs GraphQL Schema","markups":[]},{"name":"1685","type":1,"text":"An API isn’t useful if it isn’t predictable. When you consume an API, you’re usually doing it as part of some program, and that program needs to know what it can call and what it should expect to receive as the result, so that it can operate on that result.","markups":[]},{"name":"4bea","type":1,"text":"So one of the most important parts of an API is a description of what can be accessed. This is what you’re learning when you read API documentation, and with GraphQL introspection and REST API schema systems like Swagger, this information can be examined programmatically.","markups":[]},{"name":"fc65","type":1,"text":"In today’s REST APIs, the API is usually described as a list of endpoints:","markups":[]},{"name":"6925","type":8,"text":"GET /books/:id\nGET /authors/:id\nGET /books/:id/comments\nPOST /books/:id/comments","markups":[]},{"name":"d785","type":1,"text":"So you could say that the “shape” of the API is linear — there’s a list of things you can access. When you are retrieving data or saving something, the first question to ask is “which endpoint should I call”?","markups":[]},{"name":"e6ed","type":1,"text":"In GraphQL, as we covered above, you don’t use URLs to identify what is available in the API. Instead, you use a GraphQL schema:","markups":[]},{"name":"0031","type":8,"text":"type Query {\n  book(id: ID!): Book\n  author(id: ID!): Author\n}","markups":[]},{"name":"f2dc","type":8,"text":"type Mutation {\n  addComment(input: AddCommentInput): Comment\n}","markups":[]},{"name":"2d9f","type":8,"text":"type Book { ... }\ntype Author { ... }\ntype Comment { ... }\ninput AddCommentInput { ... }","markups":[]},{"name":"7aa8","type":1,"text":"There are a few interesting bits here when compared to the REST routes for a similar data set. First, instead of sending a different HTTP verb to the same URL to differentiate a read vs. a write, GraphQL uses a different initial type — Mutation vs. Query. In a GraphQL document, you can select which type of operation you’re sending with a keyword:","markups":[{"type":2,"start":221,"end":233}]},{"name":"4dc3","type":8,"text":"query { ... }\nmutation { ... }","markups":[]},{"name":"5a7a","type":1,"text":"For all of the details about the query language, read my earlier post, “The Anatomy of a GraphQL Query”.","markups":[{"type":3,"start":71,"end":103,"href":"https://dev-blog.apollodata.com/the-anatomy-of-a-graphql-query-6dffa9e9e747","title":"","rel":"","anchorType":0},{"type":2,"start":0,"end":104}]},{"name":"8ef3","type":1,"text":"You can see that the fields on the Query type match up pretty nicely with the REST routes we had above. That’s because this special type is the entry point into our data, so this is the most equivalent concept in GraphQL to an endpoint URL.","markups":[{"type":10,"start":35,"end":40}]},{"name":"e663","type":1,"text":"The way you get the initial resource from a GraphQL API is quite similar to REST — you pass a name and some parameters — but the main difference is where you can go from there. In GraphQL, you can send a complex query that fetches additional data according to relationships defined in the schema, but in REST you would have to do that via multiple requests, build the related data into the initial response, or include some special parameters in the URL to modify the response.","markups":[]},{"name":"66dc","type":13,"text":"Conclusion","markups":[]},{"name":"a71e","type":1,"text":"In REST, the space of accessible data is described as a linear list of endpoints, and in GraphQL it’s a schema with relationships.","markups":[]},{"name":"ec22","type":9,"text":"Similar: The list of endpoints in a REST API is similar to the list of fields on the Query and Mutation types in a GraphQL API. They are both the entry points into the data.","markups":[{"type":10,"start":85,"end":90},{"type":10,"start":95,"end":103},{"type":1,"start":0,"end":8}]},{"name":"9026","type":9,"text":"Similar: Both have a way to differentiate if an API request is meant to read data or write it.","markups":[{"type":1,"start":0,"end":8}]},{"name":"00bd","type":9,"text":"Different: In GraphQL, you can traverse from the entry point to related data, following relationships defined in the schema, in a single request. In REST, you have to call multiple endpoints to fetch related resources.","markups":[{"type":1,"start":0,"end":10}]},{"name":"eff4","type":9,"text":"Different: In GraphQL, there’s no difference between the fields on the Query type and the fields on any other type, except that only the query type is accessible at the root of a query. For example, you can have arguments in any field in a query. In REST, there’s no first-class concept of a nested URL.","markups":[{"type":10,"start":71,"end":76},{"type":1,"start":0,"end":10}]},{"name":"deb5","type":9,"text":"Different: In REST, you specify a write by changing the HTTP verb from GET to something else like POST. In GraphQL, you change a keyword in the query.","markups":[{"type":10,"start":71,"end":74},{"type":10,"start":98,"end":102},{"type":1,"start":0,"end":10}]},{"name":"3a31","type":1,"text":"Because of the first point in the list of similarities above, people often start referring to fields on the Query type as GraphQL “endpoints” or “queries”. While that’s a reasonable comparison, it can lead to a misleading perception that the Query type works significantly differently from other types, which is not the case.","markups":[{"type":10,"start":108,"end":113}]},{"name":"e1d0","type":3,"text":"Route Handlers vs. Resolvers","markups":[]},{"name":"c9ef","type":1,"text":"So what happens when you actually call an API? Well, usually it executes some code on the server that received the request. That code might do a computation, load data from a database, call a different API, or really do anything. The whole idea is you don’t need to know from the outside what it’s doing. But both REST and GraphQL have pretty standard ways for implementing the inside of that API, and it’s useful to compare them to get a sense for how these technologies are different.","markups":[]},{"name":"f6f6","type":1,"text":"In this comparison I’ll use JavaScript code because that’s what I’m most familiar with, but of course you can implement both REST and GraphQL APIs in almost any programming language. I’ll also skip any boilerplate required for setting up the server, since it’s not important to the concepts.","markups":[]},{"name":"da68","type":1,"text":"Let’s look at a hello world example with express, a popular API library for Node:","markups":[]},{"name":"7ba5","type":8,"text":"app.get('/hello', function (req, res) {\n  res.send('Hello World!')\n})","markups":[{"type":10,"start":0,"end":69}]},{"name":"0017","type":1,"text":"Here you see we’ve created a /hello endpoint that returns the string 'Hello World!'. From this example we can see the lifecycle of an HTTP request in a REST API server:","markups":[{"type":10,"start":29,"end":35},{"type":10,"start":69,"end":83}]},{"name":"b415","type":10,"text":"The server receives the request and retrieves the HTTP verb (GET in this case) and URL path","markups":[{"type":10,"start":61,"end":64}]},{"name":"c041","type":10,"text":"The API library matches up the verb and path to a function registered by the server code","markups":[]},{"name":"f7bd","type":10,"text":"The function executes once, and returns a result","markups":[]},{"name":"8433","type":10,"text":"The API library serializes the result, adds an appropriate response code and headers, and sends it back to the client","markups":[]},{"name":"f668","type":1,"text":"GraphQL works in a very similar way, and for the same hello world example it’s virtually identical:","markups":[{"type":3,"start":54,"end":73,"href":"https://launchpad.graphql.com/new","title":"","rel":"","anchorType":0}]},{"name":"f010","type":8,"text":"const resolvers = {\n  Query: {\n    hello: () =\x3e {\n      return 'Hello world!';\n    },\n  },\n};","markups":[]},{"name":"179e","type":1,"text":"As you can see, instead of providing a function for a specific URL, we’re providing a function that matches a particular field on a type, in this case the hello field on the Query type. In GraphQL, this function that implements a field is called a resolver.","markups":[{"type":10,"start":155,"end":160},{"type":10,"start":174,"end":179},{"type":1,"start":248,"end":256}]},{"name":"4510","type":1,"text":"To make a request we need a query:","markups":[]},{"name":"24ca","type":8,"text":"query {\n  hello\n}","markups":[]},{"name":"1c19","type":1,"text":"So here’s what happens when our server receives a GraphQL request:","markups":[]},{"name":"bfc0","type":10,"text":"The server receives the request, and retrieves the GraphQL query","markups":[]},{"name":"0aa9","type":10,"text":"The query is traversed, and for each field the appropriate resolver is called. In this case, there’s just one field, hello, and it’s on the Query type","markups":[{"type":10,"start":117,"end":122},{"type":10,"start":140,"end":145}]},{"name":"95d4","type":10,"text":"The function is called, and it returns a result","markups":[]},{"name":"7d3e","type":10,"text":"The GraphQL library and server attaches that result to a response that matches the shape of the query","markups":[]},{"name":"ee95","type":1,"text":"So you would get back:","markups":[]},{"name":"f65b","type":8,"text":"{ \"hello\": \"Hello, world!\" }","markups":[]},{"name":"4543","type":1,"text":"But here’s one trick, we can actually call the field twice!","markups":[]},{"name":"d1ac","type":8,"text":"query {\n  hello\n  secondHello: hello\n}","markups":[]},{"name":"3a39","type":1,"text":"In this case, the same lifecycle happens as above, but since we’ve requested the same field twice using an alias, the hello resolver is actually called twice. This is clearly a contrived example, but the point is that multiple fields can be executed in one request, and the same field can be called multiple times at different points in the query.","markups":[{"type":10,"start":118,"end":123},{"type":2,"start":152,"end":157}]},{"name":"b879","type":1,"text":"This wouldn’t be complete without an example of “nested” resolvers:","markups":[]},{"name":"f1c5","type":8,"text":"{\n  Query: {\n    author: (root, { id }) =\x3e find(authors, { id: id }),\n  },\n  Author: {\n    posts: (author) =\x3e filter(posts, { authorId: author.id }),\n  },\n}","markups":[]},{"name":"4a02","type":1,"text":"These resolvers would be able to fulfill a query like:","markups":[]},{"name":"ef0c","type":8,"text":"query {\n  author(id: 1) {\n    firstName\n    posts {\n      title\n    }\n  }\n}","markups":[]},{"name":"d81d","type":1,"text":"So even though the set of resolvers is actually flat, because they are attached to various types you can build them up into nested queries. Read more about how GraphQL execution works in the post “GraphQL Explained”.","markups":[{"type":3,"start":196,"end":215,"href":"https://dev-blog.apollodata.com/graphql-explained-5844742f195e","title":"","rel":"noopener","anchorType":0}]},{"name":"ae2c","type":1,"text":"See a complete example and run different queries to test this out!","markups":[{"type":3,"start":0,"end":66,"href":"https://launchpad.graphql.com/1jzxrj179","title":"","rel":"","anchorType":0},{"type":2,"start":0,"end":66}]},{"name":"f694","type":4,"text":"An artists’ interpretation of fetching resources with multiple REST roundtrips vs. one GraphQL request","markups":[],"layout":1,"metadata":{"id":"1*qpyJSVVPkd5c6ItMmivnYg.png","originalWidth":800,"originalHeight":400,"isFeatured":true}},{"name":"b95b","type":13,"text":"Conclusion","markups":[]},{"name":"2d5b","type":1,"text":"At the end of the day, both REST and GraphQL APIs are just fancy ways to call functions over a network. If you’re familiar with building a REST API, implementing a GraphQL API won’t feel too different. But GraphQL has a big leg up because it lets you call several related functions without multiple roundtrips.","markups":[]},{"name":"3bc9","type":9,"text":"Similar: Endpoints in REST and fields in GraphQL both end up calling functions on the server.","markups":[{"type":1,"start":0,"end":8}]},{"name":"2767","type":9,"text":"Similar: Both REST and GraphQL usually rely on frameworks and libraries to handle the nitty-gritty networking boilerplate.","markups":[{"type":1,"start":0,"end":9}]},{"name":"c9a4","type":9,"text":"Different: In REST, each request usually calls exactly one route handler function. In GraphQL, one query can call many resolvers to construct a nested response with multiple resources.","markups":[{"type":1,"start":0,"end":10}]},{"name":"d83d","type":9,"text":"Different: In REST, you construct the shape of the response yourself. In GraphQL, the shape of the response is built up by the GraphQL execution library to match the shape of the query.","markups":[{"type":1,"start":0,"end":10}]},{"name":"b5e2","type":1,"text":"Essentially, you can think of GraphQL as a system for calling many nested endpoints in one request. Almost like a multiplexed REST.","markups":[]},{"name":"b21f","type":3,"text":"What does this all mean?","markups":[]},{"name":"f0d9","type":1,"text":"There are a lot of things we didn’t have space to get into in this particular post. For example, object identification, hypermedia, or caching. Perhaps that will be a topic for a later time. But I hope you agree that when you take a look at the basics, REST and GraphQL are working with fundamentally similar concepts.","markups":[]},{"name":"1042","type":1,"text":"I think some of the differences are in GraphQL’s favor. In particular, I think it’s really cool that you can implement your API as a set of small resolver functions, and then have the ability to send a complex query that retrieves multiple resources at once in a predictable way. This saves the API implementer from having to create multiple endpoints with specific shapes, and enables the API consumer to avoid fetching extra data they don’t need.","markups":[]},{"name":"cc1e","type":1,"text":"On the other hand, GraphQL doesn’t have as many tools and integrations as REST yet. For example, you can’t cache GraphQL results using HTTP caching as easily as you can REST results. But the community is working hard on better tools and infrastructure. For example, you can cache GraphQL results in your frontend using Apollo Client and Relay, and more recently also on the server with Apollo Engine.","markups":[{"type":3,"start":319,"end":332,"href":"http://www.apollographql.com/client","title":"","rel":"noopener","anchorType":0},{"type":3,"start":337,"end":343,"href":"https://facebook.github.io/relay/","title":"","rel":"noopener","anchorType":0},{"type":3,"start":386,"end":399,"href":"https://dev-blog.apollodata.com/introducing-apollo-engine-insights-error-reporting-and-caching-for-graphql-6a55147f63fc","title":"","rel":"","anchorType":0}]},{"name":"c693","type":1,"text":"Got any more ideas about comparisons between REST and GraphQL? Please post them in the comments!","markups":[]},{"name":"4f57","type":4,"text":"","markups":[],"layout":1,"metadata":{"id":"1*zHlANoouusZ92unyBjkL5A.png","originalWidth":950,"originalHeight":666},"href":"https://www.apollographql.com/engine?utm_source=medium&utm_medium=social&utm_campaign=engine-feat-201804"}],"sections":[{"name":"e92a","startIndex":0},{"name":"4603","startIndex":93}]},"postDisplay":{"coverless":true}},"virtuals":{"statusForCollection":"APPROVED","allowNotes":true,"previewImage":{"imageId":"1*qpyJSVVPkd5c6ItMmivnYg.png","filter":"","backgroundSize":"","originalWidth":800,"originalHeight":400,"strategy":"resample","height":0,"width":0},"wordCount":2477,"imageCount":2,"readingTime":9.730503144654088,"subtitle":"Two ways to send data over HTTP: What’s the difference?","publishedInCount":1,"usersBySocialRecommends":[],"noIndex":false,"recommends":1752,"socialRecommends":[],"isBookmarked":false,"tags":[{"slug":"graphql","name":"GraphQL","postCount":2027,"virtuals":{"isFollowing":false},"metadata":{"followerCount":2021,"postCount":2027,"coverImage":{"id":"1*qVVglp-AOrC5MwnssIKjKQ.png","originalWidth":4096,"originalHeight":1920,"isFeatured":true}},"type":"Tag"},{"slug":"rest","name":"Rest","postCount":1427,"virtuals":{"isFollowing":false},"metadata":{"followerCount":122,"postCount":1427,"coverImage":{"id":"1*xofAUcj6Nmbk25ZVHmIpug.jpeg","originalWidth":5774,"originalHeight":3850}},"type":"Tag"},{"slug":"api","name":"API","postCount":9921,"virtuals":{"isFollowing":false},"metadata":{"followerCount":2953,"postCount":9921,"coverImage":{"id":"1*qVVglp-AOrC5MwnssIKjKQ.png","originalWidth":4096,"originalHeight":1920,"isFeatured":true}},"type":"Tag"},{"slug":"react","name":"React","postCount":17418,"virtuals":{"isFollowing":false},"metadata":{"followerCount":18026,"postCount":17418,"coverImage":{"id":"0*y_iHWfP_MF6oP6Es","originalWidth":1000,"originalHeight":727,"isFeatured":true}},"type":"Tag"},{"slug":"data","name":"Data","postCount":16532,"virtuals":{"isFollowing":false},"metadata":{"followerCount":2311,"postCount":16532,"coverImage":{"id":"1*5Qehw-jmyk3WR4QiQh8big.jpeg","originalWidth":6000,"originalHeight":3800,"isFeatured":true,"focusPercentX":56,"focusPercentY":38}},"type":"Tag"}],"socialRecommendsCount":0,"responsesCreatedCount":33,"links":{"entries":[{"url":"https://facebook.github.io/relay/","alts":[],"httpStatus":200},{"url":"https://launchpad.graphql.com/1jzxrj179","alts":[],"httpStatus":200},{"url":"https://launchpad.graphql.com/new","alts":[],"httpStatus":200},{"url":"https://www.apollographql.com/engine?utm_source=medium&utm_medium=social&utm_campaign=engine-feat-201804","alts":[],"httpStatus":200},{"url":"http://www.apollographql.com/client","alts":[],"httpStatus":200},{"url":"https://dev-blog.apollodata.com/the-anatomy-of-a-graphql-query-6dffa9e9e747","alts":[{"type":2,"url":"medium://p/6dffa9e9e747"},{"type":3,"url":"medium://p/6dffa9e9e747"}],"httpStatus":200},{"url":"https://dev-blog.apollodata.com/graphql-explained-5844742f195e","alts":[{"type":2,"url":"medium://p/5844742f195e"},{"type":3,"url":"medium://p/5844742f195e"}],"httpStatus":200},{"url":"https://dev-blog.apollodata.com/introducing-apollo-engine-insights-error-reporting-and-caching-for-graphql-6a55147f63fc","alts":[{"type":2,"url":"medium://p/6a55147f63fc"},{"type":3,"url":"medium://p/6a55147f63fc"}],"httpStatus":200}],"version":"0.3","generatedAt":1523006088877},"isLockedPreviewOnly":false,"takeoverId":"","metaDescription":"","totalClapCount":6260,"sectionCount":2,"readingList":0,"topics":[]},"coverless":true,"slug":"graphql-vs-rest","translationSourcePostId":"","translationSourceCreatorId":"","isApprovedTranslation":false,"inResponseToPostId":"","inResponseToRemovedAt":0,"isTitleSynthesized":true,"allowResponses":true,"importedUrl":"","importedPublishedAt":0,"visibility":0,"uniqueSlug":"graphql-vs-rest-5d425123e34b","previewContent":{"bodyModel":{"paragraphs":[{"name":"previewImage","type":4,"text":"","layout":10,"metadata":{"id":"1*qpyJSVVPkd5c6ItMmivnYg.png","originalWidth":800,"originalHeight":400,"isFeatured":true}},{"name":"152d","type":3,"text":"GraphQL vs. REST","markups":[],"alignment":1},{"name":"0018","type":13,"text":"Two ways to send data over HTTP: What’s the difference?","markups":[],"alignment":1}],"sections":[{"startIndex":0}]},"isFullContent":false},"license":0,"inResponseToMediaResourceId":"","canonicalUrl":"https://blog.apollographql.com/graphql-vs-rest-5d425123e34b","approvedHomeCollectionId":"3804c1b351c9","approvedHomeCollection":{"id":"3804c1b351c9","name":"Apollo GraphQL","slug":"apollo-stack","tags":["REACT","ANGULAR","GRAPHQL","REACTJS","ANGULARJS"],"creatorId":"803918030a60","description":"We build Apollo Client, Engine, and Server to help you put GraphQL over REST.","shortDescription":"We build Apollo Client, Engine, and Server to help you put…","image":{"imageId":"1*h3E_KHKB9jNKTkXkhrY5gA.png","filter":"","backgroundSize":"","originalWidth":1600,"originalHeight":1600,"strategy":"resample","height":0,"width":0},"metadata":{"followerCount":20038,"activeAt":1530634071781},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":false,"canRemove":false,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false,"canSendNewsletter":false,"canViewLockedPosts":false,"canViewCloaked":false,"canEditOwnPosts":false,"canBeAssignedAuthor":false,"canEnrollInHightower":false,"canLockPostsForMediumMembers":false,"canLockOwnPostsForMediumMembers":false},"isSubscribed":false,"isNewsletterSubscribed":false,"memberOfMembershipPlanId":"","isEnrolledInHightower":false,"isEligibleForHightower":false},"logo":{"imageId":"1*JVFm_pqNLKi4sobJzicbww.png","filter":"","backgroundSize":"","originalWidth":809,"originalHeight":239,"strategy":"resample","height":0,"width":0},"twitterUsername":"apollographql","facebookPageName":"apollographql","collectionMastheadId":"1d7785bfc122","domain":"blog.apollographql.com","sections":[{"type":2,"collectionHeaderMetadata":{"title":"","description":"We build Apollo Client, Engine, Server, and other tools for GraphQL developers.","backgroundImage":{},"logoImage":{"id":"1*ii79rz_-iauM21n4L3g9Ug@2x.png","originalWidth":904,"originalHeight":329,"alt":"Apollo GraphQL"},"alignment":2,"layout":5}},{"type":1,"postListMetadata":{"source":1,"layout":4,"number":1,"postIds":[]}},{"type":1,"postListMetadata":{"source":1,"layout":4,"number":6,"postIds":[]}},{"type":3,"promoMetadata":{"sectionHeader":"","promoId":"ae40014c9596"}},{"type":1,"postListMetadata":{"source":1,"layout":5,"number":6,"postIds":[]}},{"type":3,"promoMetadata":{"sectionHeader":"","promoId":"2145d661dab2"}},{"type":1,"postListMetadata":{"source":1,"layout":5,"number":6,"postIds":[]}}],"tintColor":"#FF220A82","lightText":true,"favicon":{"imageId":"1*h3E_KHKB9jNKTkXkhrY5gA.png","filter":"","backgroundSize":"","originalWidth":1600,"originalHeight":1600,"strategy":"resample","height":0,"width":0},"colorPalette":{"defaultBackgroundSpectrum":{"colorPoints":[{"color":"#FF737DE2","point":0},{"color":"#FF6B75CF","point":0.1},{"color":"#FF646CBC","point":0.2},{"color":"#FF5C64A9","point":0.3},{"color":"#FF535A97","point":0.4},{"color":"#FF4B5184","point":0.5},{"color":"#FF424772","point":0.6},{"color":"#FF383D5F","point":0.7},{"color":"#FF2E324D","point":0.8},{"color":"#FF23263A","point":0.9},{"color":"#FF171927","point":1}],"backgroundColor":"#FFFFFFFF"},"tintBackgroundSpectrum":{"colorPoints":[{"color":"#FF220A82","point":0},{"color":"#FF363992","point":0.1},{"color":"#FF4E56A4","point":0.2},{"color":"#FF666FB5","point":0.3},{"color":"#FF7D86C5","point":0.4},{"color":"#FF949CD3","point":0.5},{"color":"#FFAAB1E1","point":0.6},{"color":"#FFBFC5EE","point":0.7},{"color":"#FFD4D8FB","point":0.8},{"color":"#FFE8EBFF","point":0.9},{"color":"#FFFCFEFF","point":1}],"backgroundColor":"#FF220A82"},"highlightSpectrum":{"colorPoints":[{"color":"#FFEFF1FF","point":0},{"color":"#FFECEFFF","point":0.1},{"color":"#FFE9EDFF","point":0.2},{"color":"#FFE6EBFF","point":0.3},{"color":"#FFE3E9FF","point":0.4},{"color":"#FFE0E7FF","point":0.5},{"color":"#FFDDE5FF","point":0.6},{"color":"#FFD9E3FF","point":0.7},{"color":"#FFD6E0FF","point":0.8},{"color":"#FFD3DEFF","point":0.9},{"color":"#FFD0DCFF","point":1}],"backgroundColor":"#FFFFFFFF"}},"navItems":[{"type":4,"title":"Client","url":"https://blog.apollographql.com/client/home","topicId":"1550aa6c5ee1","source":"topicId"},{"type":4,"title":"Engine","url":"https://blog.apollographql.com/engine/home","topicId":"4fefed3b6136","source":"topicId"},{"type":4,"title":"Server","url":"https://blog.apollographql.com/server/home","topicId":"f3bd439dd7ee","source":"topicId"},{"type":3,"title":"apollographql.com","url":"https://www.apollographql.com"}],"colorBehavior":2,"instantArticlesState":0,"acceleratedMobilePagesState":0,"googleAnalyticsId":"UA-74643563-11","ampLogo":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"header":{"title":"","description":"We build Apollo Client, Engine, Server, and other tools for GraphQL developers.","backgroundImage":{},"logoImage":{"id":"1*ii79rz_-iauM21n4L3g9Ug@2x.png","originalWidth":904,"originalHeight":329,"alt":"Apollo GraphQL"},"alignment":2,"layout":5},"type":"Collection"},"newsletterId":"","webCanonicalUrl":"https://blog.apollographql.com/graphql-vs-rest-5d425123e34b","mediumUrl":"https://blog.apollographql.com/graphql-vs-rest-5d425123e34b","migrationId":"","notifyFollowers":true,"notifyTwitter":false,"isSponsored":false,"isRequestToPubDisabled":false,"notifyFacebook":false,"responseHiddenOnParentPostAt":0,"isSeries":false,"isSubscriptionLocked":false,"seriesLastAppendedAt":0,"audioVersionDurationSec":0,"sequenceId":"","isNsfw":false,"isEligibleForRevenue":false,"isBlockedFromHightower":false,"deletedAt":0,"lockedPostSource":0,"hightowerMinimumGuaranteeStartsAt":0,"hightowerMinimumGuaranteeEndsAt":0,"featureLockRequestAcceptedAt":0,"featureLockRequestMinimumGuaranteeAmount":0,"isElevate":false,"mongerRequestType":1,"layerCake":0,"type":"Post"},"mentionedUsers":[],"collaborators":[{"user":{"userId":"39cbd38c57c8","name":"Jonas Helfer","username":"helfer","createdAt":1456182773039,"lastPostCreatedAt":1516601741066,"imageId":"1*m-UGvVOGjdB-DvIccQ-qcw.jpeg","backgroundImageId":"","bio":"Software Engineer from Switzerland, now living in San Francisco. GraphQL Evangelist @databricks","twitterScreenName":"helferjs","facebookAccountId":"","allowNotes":1,"mediumMemberAt":0,"isPartnerProgramEnrolled":false,"type":"User"},"state":"visible"},{"user":{"userId":"592c66ff70d","name":"Martijn Walraven","username":"martijnwalraven","createdAt":1396960829948,"lastPostCreatedAt":1530274347144,"imageId":"1*w4izIUvFFMnUui8LDIj3OQ.jpeg","backgroundImageId":"","bio":"Technical Product Manager @apollographql","twitterScreenName":"martijnwalraven","facebookAccountId":"10102377747426924","allowNotes":1,"mediumMemberAt":0,"isPartnerProgramEnrolled":false,"type":"User"},"state":"visible"}],"collectionUserRelations":[],"mode":null,"references":{"User":{"803918030a60":{"userId":"803918030a60","name":"Sashko Stubailo","username":"stubailo","createdAt":1415595055615,"lastPostCreatedAt":1531620653269,"imageId":"1*PY72Bc0gKLEQOBZ0m1P6rw@2x.jpeg","backgroundImageId":"","bio":"Open source lead at @apollographql and @meteorjs, https://github.com/stubailo","twitterScreenName":"stubailo","socialStats":{"userId":"803918030a60","usersFollowedCount":426,"usersFollowedByCount":5297,"type":"SocialStats"},"social":{"userId":"lo_UbGWuDXe1fGU","targetUserId":"803918030a60","type":"Social"},"facebookAccountId":"10153739958494254","allowNotes":1,"isNsfw":false,"isWriterProgramInvited":false,"isPartnerProgramEnrolled":false,"isWriterProgramEnrolled":false,"type":"User"}},"Collection":{"3804c1b351c9":{"id":"3804c1b351c9","name":"Apollo GraphQL","slug":"apollo-stack","tags":["REACT","ANGULAR","GRAPHQL","REACTJS","ANGULARJS"],"creatorId":"803918030a60","description":"We build Apollo Client, Engine, and Server to help you put GraphQL over REST.","shortDescription":"We build Apollo Client, Engine, and Server to help you put…","image":{"imageId":"1*h3E_KHKB9jNKTkXkhrY5gA.png","filter":"","backgroundSize":"","originalWidth":1600,"originalHeight":1600,"strategy":"resample","height":0,"width":0},"metadata":{"followerCount":20038,"activeAt":1530634071781},"virtuals":{"permissions":{"canPublish":false,"canPublishAll":false,"canRepublish":false,"canRemove":false,"canManageAll":false,"canSubmit":false,"canEditPosts":false,"canAddWriters":false,"canViewStats":false,"canSendNewsletter":false,"canViewLockedPosts":false,"canViewCloaked":false,"canEditOwnPosts":false,"canBeAssignedAuthor":false,"canEnrollInHightower":false,"canLockPostsForMediumMembers":false,"canLockOwnPostsForMediumMembers":false},"isSubscribed":false,"isNewsletterSubscribed":false,"memberOfMembershipPlanId":"","isEnrolledInHightower":false,"isEligibleForHightower":false},"logo":{"imageId":"1*JVFm_pqNLKi4sobJzicbww.png","filter":"","backgroundSize":"","originalWidth":809,"originalHeight":239,"strategy":"resample","height":0,"width":0},"twitterUsername":"apollographql","facebookPageName":"apollographql","collectionMastheadId":"1d7785bfc122","domain":"blog.apollographql.com","sections":[{"type":2,"collectionHeaderMetadata":{"title":"","description":"We build Apollo Client, Engine, Server, and other tools for GraphQL developers.","backgroundImage":{},"logoImage":{"id":"1*ii79rz_-iauM21n4L3g9Ug@2x.png","originalWidth":904,"originalHeight":329,"alt":"Apollo GraphQL"},"alignment":2,"layout":5}},{"type":1,"postListMetadata":{"source":1,"layout":4,"number":1,"postIds":[]}},{"type":1,"postListMetadata":{"source":1,"layout":4,"number":6,"postIds":[]}},{"type":3,"promoMetadata":{"sectionHeader":"","promoId":"ae40014c9596"}},{"type":1,"postListMetadata":{"source":1,"layout":5,"number":6,"postIds":[]}},{"type":3,"promoMetadata":{"sectionHeader":"","promoId":"2145d661dab2"}},{"type":1,"postListMetadata":{"source":1,"layout":5,"number":6,"postIds":[]}}],"tintColor":"#FF220A82","lightText":true,"favicon":{"imageId":"1*h3E_KHKB9jNKTkXkhrY5gA.png","filter":"","backgroundSize":"","originalWidth":1600,"originalHeight":1600,"strategy":"resample","height":0,"width":0},"colorPalette":{"defaultBackgroundSpectrum":{"colorPoints":[{"color":"#FF737DE2","point":0},{"color":"#FF6B75CF","point":0.1},{"color":"#FF646CBC","point":0.2},{"color":"#FF5C64A9","point":0.3},{"color":"#FF535A97","point":0.4},{"color":"#FF4B5184","point":0.5},{"color":"#FF424772","point":0.6},{"color":"#FF383D5F","point":0.7},{"color":"#FF2E324D","point":0.8},{"color":"#FF23263A","point":0.9},{"color":"#FF171927","point":1}],"backgroundColor":"#FFFFFFFF"},"tintBackgroundSpectrum":{"colorPoints":[{"color":"#FF220A82","point":0},{"color":"#FF363992","point":0.1},{"color":"#FF4E56A4","point":0.2},{"color":"#FF666FB5","point":0.3},{"color":"#FF7D86C5","point":0.4},{"color":"#FF949CD3","point":0.5},{"color":"#FFAAB1E1","point":0.6},{"color":"#FFBFC5EE","point":0.7},{"color":"#FFD4D8FB","point":0.8},{"color":"#FFE8EBFF","point":0.9},{"color":"#FFFCFEFF","point":1}],"backgroundColor":"#FF220A82"},"highlightSpectrum":{"colorPoints":[{"color":"#FFEFF1FF","point":0},{"color":"#FFECEFFF","point":0.1},{"color":"#FFE9EDFF","point":0.2},{"color":"#FFE6EBFF","point":0.3},{"color":"#FFE3E9FF","point":0.4},{"color":"#FFE0E7FF","point":0.5},{"color":"#FFDDE5FF","point":0.6},{"color":"#FFD9E3FF","point":0.7},{"color":"#FFD6E0FF","point":0.8},{"color":"#FFD3DEFF","point":0.9},{"color":"#FFD0DCFF","point":1}],"backgroundColor":"#FFFFFFFF"}},"navItems":[{"type":4,"title":"Client","url":"https://blog.apollographql.com/client/home","topicId":"1550aa6c5ee1","source":"topicId"},{"type":4,"title":"Engine","url":"https://blog.apollographql.com/engine/home","topicId":"4fefed3b6136","source":"topicId"},{"type":4,"title":"Server","url":"https://blog.apollographql.com/server/home","topicId":"f3bd439dd7ee","source":"topicId"},{"type":3,"title":"apollographql.com","url":"https://www.apollographql.com"}],"colorBehavior":2,"instantArticlesState":0,"acceleratedMobilePagesState":0,"googleAnalyticsId":"UA-74643563-11","ampLogo":{"imageId":"","filter":"","backgroundSize":"","originalWidth":0,"originalHeight":0,"strategy":"resample","height":0,"width":0},"header":{"title":"","description":"We build Apollo Client, Engine, Server, and other tools for GraphQL developers.","backgroundImage":{},"logoImage":{"id":"1*ii79rz_-iauM21n4L3g9Ug@2x.png","originalWidth":904,"originalHeight":329,"alt":"Apollo GraphQL"},"alignment":2,"layout":5},"type":"Collection"}},"Social":{"803918030a60":{"userId":"lo_UbGWuDXe1fGU","targetUserId":"803918030a60","type":"Social"}},"SocialStats":{"803918030a60":{"userId":"803918030a60","usersFollowedCount":426,"usersFollowedByCount":5297,"type":"SocialStats"}}}})
// ]]></script><!-- START Parse.ly Include: Standard --><div id="parsely-root" style="display: none"><span id="parsely-cfg" data-parsely-site="medium.com"></span></div><script>(function(s, p, d) {var h = d.location.protocol, i = p + "-" + s, e = d.getElementById(i), r = d.getElementById(p + "-root"), u = h === "https:" ? "d1z2jf7jlzjs58.cloudfront.net" : "static." + p + ".com"; if (e) return; e = d.createElement(s); e.id = i; e.async = true; e.src = h + "//" + u + "/p.js"; r.appendChild(e);})("script", "parsely", document);</script><!-- END Parse.ly Include: Standard --></body></html>